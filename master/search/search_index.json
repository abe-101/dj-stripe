{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dj-stripe - Django + Stripe Made Easy","text":"<p>Stripe Models for Django.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>dj-stripe implements all of the Stripe models, for Django. Set up your webhook endpoint and start receiving model updates. You will then have a copy of all the Stripe models available in Django models, as soon as they are updated!</p> <p>The full documentation is available on Read the Docs.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Stripe Core</li> <li>Stripe Billing</li> <li>Stripe Cards (JS v2) and Sources (JS v3)</li> <li>Payment Methods and Payment Intents (SCA support)</li> <li>Support for multiple accounts and API keys</li> <li>Stripe Connect (partial support)</li> <li>Tested with Stripe API <code>2020-08-27</code> (see API versions)</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Django &gt;=4.2</li> <li>Python &gt;=3.9</li> <li>PostgreSQL engine (recommended) &gt;=12</li> <li>MySQL engine: MariaDB &gt;=10.5 or MySQL &gt;=8.0</li> <li>SQLite: Not recommended in production. Version &gt;=3.26 required.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>See installation instructions.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>See release notes on Read the Docs.</p>"},{"location":"#funding-and-support","title":"Funding and Support","text":"<p>You can now become a sponsor to dj-stripe with GitHub Sponsors.</p> <p>We've been bringing dj-stripe to the world for over 10 years and are excited to be able to start dedicating some real resources to the project.</p> <p>Your sponsorship helps us keep a team of maintainers actively working to improve dj-stripe and ensure it stays up-to-date with the latest Stripe changes. If you use dj-stripe commercially, we would encourage you to invest in its continued development by signing up for a paid plan. Corporate sponsors receive priority support and development time.</p> <p>All contributions through GitHub sponsors flow into our Open Collective, which holds our funds and keeps an open ledger on how donations are spent.</p>"},{"location":"#our-gold-sponsors","title":"Our Gold sponsors","text":""},{"location":"#similar-libraries","title":"Similar libraries","text":"<ul> <li>dj-paypal     (PayPal)</li> <li>dj-paddle     (Paddle)</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/dj-stripe/dj-stripe/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>The version of python and Django you're running</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"CONTRIBUTING/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#write-documentation","title":"Write Documentation","text":"<p>dj-stripe could always use more documentation, whether as part of the official dj-stripe docs, in docstrings, or even on the web in blog posts, articles, and such.</p> <p>To see the project's documentation live, run the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>The documentation site will then be served on http://127.0.0.1:8000.</p> <p>In case of any installation error</p> <p>In case you get the error that some plugin is not installed, please run:     <pre><code>poetry install --with docs\n</code></pre></p> <p>If you wish to just generate the documentation, you can replace <code>serve</code> with <code>build</code>, and the docs will be generated into the <code>site/</code> folder.</p>"},{"location":"CONTRIBUTING/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/dj-stripe/dj-stripe/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome     :)</li> </ul>"},{"location":"CONTRIBUTING/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up local development.</p> <ol> <li> <p>Fork dj-stripe on Github.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/dj-stripe.git\n</code></pre> </li> <li> <p>Set up pre-commit:</p> <pre><code>$ git init # A git repo is required to install pre-commit\n$ pre-commit install\n</code></pre> </li> <li> <p>Set up your test database. If you're running tests using PostgreSQL:</p> <pre><code>$ createdb djstripe\n</code></pre> <p>or if you want to test vs sqlite (for convenience) or MySQL, they can be selected by setting this environment variable:</p> <pre><code>$ export DJSTRIPE_TEST_DB_VENDOR=sqlite\n# or: export DJSTRIPE_TEST_DB_VENDOR=mysql\n</code></pre> <p>For postgres and mysql, the database host,port,username and password can be set with environment variables, see <code>tests/settings.py</code></p> </li> <li> <p>Install Poetry if you do not have it already.</p> <p>You can set up a virtual environment with:</p> <pre><code>$ poetry install\n</code></pre> <p>You can then, at any time, open a shell into that environment with:</p> <pre><code>$ poetry shell\n</code></pre> </li> <li> <p>When you're done making changes, check that your changes pass the tests. A quick     test run can be done as follows:</p> <pre><code>$ DJSTRIPE_TEST_DB_VENDOR=sqlite poetry run pytest --reuse-db\n</code></pre> <p>You should also check that the tests pass with other python and Django versions with tox. pytest will output both command line and html coverage statistics and will warn you if your changes caused code coverage to drop.:</p> <pre><code>$ pip install tox\n$ tox\n</code></pre> </li> <li> <p>If your changes altered the models you may need to generate Django migrations:</p> <pre><code>$ DJSTRIPE_TEST_DB_VENDOR=sqlite poetry run ./manage.py makemigrations\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol> <p>Congratulations, you're now a dj-stripe contributor! Have some \u2665 from us.</p>"},{"location":"CONTRIBUTING/#preferred-django-model-field-types","title":"Preferred Django Model Field Types","text":"<p>When mapping from Stripe API field types to Django model fields, we try to follow Django best practises where practical.</p> <p>The following types should be preferred for fields that map to the Stripe API (which is almost all fields in our models).</p>"},{"location":"CONTRIBUTING/#strings","title":"Strings","text":"<ul> <li>Stripe API string fields have a default maximum length of 5,000     characters.</li> <li>In some cases a maximum length (<code>maxLength</code>) is specified in the Stripe OpenAPI     schema.</li> <li>We follow Django's     recommendation and     avoid using null on string fields (which means we store <code>\"\"</code> for string fields that     are <code>null</code> in stripe). Note that is enforced in the sync logic in     StripeModel._stripe_object_to_record.</li> <li>For long string fields (eg above 255 characters) we prefer <code>TextField</code> over     <code>Charfield</code>.</li> </ul> <p>Therefore the default type for string fields that don't have a maxLength specified in the Stripe OpenAPI schema should usually be:</p> <pre><code>str_field = TextField(max_length=5000, default=\", blank=True, help_text=\"...\")\n</code></pre>"},{"location":"CONTRIBUTING/#enumerations","title":"Enumerations","text":"<p>Fields that have a defined set of values can be implemented using <code>StripeEnumField</code>.</p>"},{"location":"CONTRIBUTING/#hash-dictionaries","title":"Hash (dictionaries)","text":"<p>Use the <code>JSONField</code> in <code>djstripe.fields</code>.</p>"},{"location":"CONTRIBUTING/#currency-amounts","title":"Currency amounts","text":"<p>Stripe handles all currency amounts as integer cents, we currently have a mixture of fields as integer cents and decimal (eg dollar, euro etc) values, but we are aiming to standardise on cents (see https://github.com/dj-stripe/dj-stripe/issues/955).</p> <p>All new currency amount fields should use <code>StripeQuantumCurrencyAmountField</code>.</p>"},{"location":"CONTRIBUTING/#dates-and-datetimes","title":"Dates and Datetimes","text":"<p>The Stripe API uses an integer timestamp (seconds since the Unix epoch) for dates and datetimes. We store this as a datetime field, using <code>StripeDateTimeField</code>.</p>"},{"location":"CONTRIBUTING/#django-migration-policy","title":"Django Migration Policy","text":"<p>Migrations are considered a breaking change, so it's not usually not acceptable to add a migration to a stable branch, it will be a new <code>MAJOR.MINOR.0</code> release.</p> <p>A workaround to this in the case that the Stripe API data isn't compatible with out model (eg Stripe is sending <code>null</code> to a non-null field) is to implement the <code>_manipulate_stripe_object_hook</code> classmethod on the model.</p>"},{"location":"CONTRIBUTING/#avoid-new-migrations-with-non-schema-changes","title":"Avoid new migrations with non-schema changes","text":"<p>If a code change produces a migration that doesn't alter the database schema (eg changing <code>help_text</code>) then instead of adding a new migration you can edit the most recent migration that affects the field in question.</p> <p>e.g.: https://github.com/dj-stripe/dj-stripe/commit/e2762c38918a90f00c42ecf21187a920bd3a2087</p>"},{"location":"CONTRIBUTING/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>The pull request must not drop code coverage below the current level.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new     functionality into a function with a docstring.</li> <li>If the pull request makes changes to a model, include Django migrations.</li> <li>The pull request should work for Python 3.6+. Check Github     Actions and make sure that the     tests pass for all supported Python versions.</li> <li>Code formatting: Make sure to install <code>pre-commit</code> to automatically run it on <code>staged files</code> or run manually with <code>pre-commit run --all-files</code> at the dj-stripe root to keep a consistent style.</li> </ol>"},{"location":"api_keys/","title":"Managing Stripe API keys","text":"<p>Stripe API keys are stored in the database, and editable from the Django admin.</p> <p>Important Note</p> <p>By default, keys are visible by anyone who has access to the dj-stripe administration.</p>"},{"location":"api_keys/#adding-new-api-keys","title":"Adding new API keys","text":"<p>You may add new API keys via the Dj-Stripe \"API key\" administration. The only required value is the key's \"secret\" value itself. Example:</p> <p></p> <p>Once saved, Dj-Stripe will automatically detect whether the key is a public, restricted or secret key, and whether it's for live or test mode. If it's a secret key, the matching Account object will automatically be fetched as well and the key will be associated with it, so that it can be used to communicate with the Stripe API when dealing with objects belonging to that Account.</p>"},{"location":"api_keys/#updating-the-api-keys","title":"Updating the API keys","text":"<p>When expiring or rolling new secret keys, you should create the new API key in Stripe, then add it from the Django administration. Whenever you are ready, you may delete the old key. (It is safe to keep it around, as long as it hasn't expired. Keeping expired keys in the database may result in errors during usage).</p>"},{"location":"api_keys/#faq","title":"FAQ","text":""},{"location":"api_keys/#why-store-them-in-the-database","title":"Why store them in the database?","text":"<p>As we work on supporting multiple Stripe accounts per instance, it is vital for dj-stripe to have a mechanism to store more than one Stripe API key. It also became obvious that we may want proper programmatic access to create and delete keys. Furthermore, API keys are a legitimate upstream Stripe object, and it is not unlikely the API may allow access to listing other API keys in the future, in which case we will want to move them to the database anyway.</p>"},{"location":"api_keys/#isnt-that-insecure","title":"Isn't that insecure?","text":"<p>Please do keep your billing database encrypted. There's a copy of all your customers' billing data on it!</p> <p>You may also instead create a read-only restricted key with all-read permissions for dj-stripe. There is no added risk there, given that dj-stripe holds a copy of all your data regardless.</p>"},{"location":"api_keys/#im-using-environment-variables-do-i-need-to-change-anything","title":"I'm using environment variables. Do I need to change anything?","text":"<p>Not at this time. The settings <code>STRIPE_LIVE_SECRET_KEY</code> and <code>STRIPE_TEST_SECRET_KEY</code> can still be used.</p>"},{"location":"api_keys/#what-about-public-keys","title":"What about public keys?","text":"<p>Setting <code>STRIPE_LIVE_PUBLIC_KEY</code> and <code>STRIPE_TEST_PUBLIC_KEY</code> will be deprecated in 2.5.0. You do not risk anything by leaving them in your settings: They are not used by Dj-Stripe outside of the Dj-Stripe mixins, which are now themselves deprecated. So you can safely leave them in your settings, or you can move them to the database as well (Keys beginning in <code>pk_test_</code> and <code>pk_live_</code> will be detected as publishable keys).</p>"},{"location":"api_versions/","title":"A note on Stripe API versions","text":"<p>A point that can cause confusion to new users of dj-stripe is that there are several different Stripe API versions in play at once.</p>"},{"location":"api_versions/#your-stripe-accounts-api-version","title":"Your Stripe account's API version","text":"<p>This is the version used by Stripe when sending webhook data to you and the default version used by the Stripe API. You can find this on your Stripe dashboard labelled \"default\". New Stripe accounts are always on the latest version.</p> <p>Read more about it on stripe.com/docs/api/versioning.</p>"},{"location":"api_versions/#stripes-current-latest-api-version","title":"Stripe's current latest API version","text":"<p>You can find this on your Stripe dashboard labelled \"latest\" or in Stripe's API documentation</p> <p>See stripe.com/docs/upgrades on how to upgrade your Stripe API version. Stripe will only allow upgrades to the latest version.</p>"},{"location":"api_versions/#dj-stripe-api-version","title":"Dj-stripe API version","text":"<p>This is the Stripe API version used by dj-stripe in all communication with Stripe, including when processing webhooks (though webhook data is sent to you by Stripe with your API version, we re-fetch the data with dj-stripe's API version), this is because the API schema needs to match dj-stripe's Django model schema.</p> <p>It is defined by <code>STRIPE_API_VERSION</code> with a default of <code>DEFAULT_STRIPE_API_VERSION</code>. You mustn't change this as it ensures that dj-stripe receives data in the format it expects.</p> <p>Note</p> <p>dj-stripe will always use <code>STRIPE_API_VERSION</code> in its requests regardless of what <code>stripe.api_version</code> is set to.</p>"},{"location":"api_versions/#dj-stripe-latest-tested-version","title":"Dj-stripe Latest Tested Version","text":"<p>This is the most recent Stripe account API version used by the maintainers during testing, more recent versions account versions are probably fine though.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#get-the-distribution","title":"Get the distribution","text":"<p>Install dj-stripe with pip: <pre><code>    pip install dj-stripe\n</code></pre></p> <p>Or with Poetry (recommended): <pre><code>    poetry add dj-stripe\n</code></pre></p>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>Add <code>djstripe</code> to your <code>INSTALLED_APPS</code>: <pre><code>    INSTALLED_APPS =(\n        ...\n        \"djstripe\",\n        ...\n    )\n</code></pre></p> <p>Add to urls.py:</p> <pre><code>    path(\"stripe/\", include(\"djstripe.urls\", namespace=\"djstripe\")),\n</code></pre> <p>Tell Stripe about the webhook (Stripe webhook docs can be found here) using the full URL of your endpoint from the urls.py step above (e.g. <code>https://example.com/stripe/webhook</code>).</p> <p>Add your Stripe keys and set the operating mode: <pre><code>    STRIPE_LIVE_SECRET_KEY = os.environ.get(\"STRIPE_LIVE_SECRET_KEY\", \"&lt;your secret key&gt;\")\n    STRIPE_TEST_SECRET_KEY = os.environ.get(\"STRIPE_TEST_SECRET_KEY\", \"&lt;your secret key&gt;\")\n    STRIPE_LIVE_MODE = False  # Change to True in production\n</code></pre></p> <p>Note</p> <p>djstripe expects <code>STRIPE_LIVE_MODE</code> to be a Boolean Type. In case you use <code>Bash env vars or equivalent</code> to inject its value, make sure to convert it to a Boolean type. We highly recommended the library django-environ</p> <p>Sync data from Stripe:</p> <p>Note</p> <p>djstripe expects <code>APIKeys</code> of all Stripe Accounts you'd like to sync data for to already be in the DB. They can be Added from Django Admin.</p> <p>Run the commands:</p> <pre><code>    python manage.py migrate\n\n    python manage.py djstripe_sync_models\n</code></pre> <p>See here for notes about usage of the Stripe Elements frontend JS library.</p>"},{"location":"installation/#running-tests","title":"Running Tests","text":"<p>Assuming the tests are run against PostgreSQL:</p> <pre><code>    createdb djstripe\n    pip install tox\n    tox\n</code></pre>"},{"location":"stripe_elements_js/","title":"Integrating Stripe Elements (JS SDK)","text":"<p>Tip</p> <p>TLDR: If you haven't yet migrated to PaymentIntents, prefer <code>stripe.createSource()</code> over <code>stripe.createToken()</code> for better compatibility with PaymentMethods.</p> <p>Attention</p> <p>A point that can cause confusion when integrating Stripe on the web is that there are multiple generations of frontend JS APIs that use Stripe Elements with stripe js v3.</p>"},{"location":"stripe_elements_js/#in-descending-order-of-preference-these-are","title":"In descending order of preference these are:","text":""},{"location":"stripe_elements_js/#payment-intents-sca-compliant","title":"Payment Intents (SCA compliant)","text":"<p>The newest and preferred way of handling payments, which supports SCA compliance (3D secure etc).</p>"},{"location":"stripe_elements_js/#charges-using-stripecreatesource","title":"Charges using stripe.createSource()","text":"<p>This creates Source objects within Stripe, and can be used for various different methods of payment (including, but not limited to cards), but isn't SCA compliant.</p> <p>The Card Elements Quickstart JS example can be used, except use <code>stripe.createSource</code> instead of <code>stripe.createToken</code> and the <code>result.source</code> instead of <code>result.token</code>. <code>Checkout a working example of this</code></p>"},{"location":"stripe_elements_js/#charges-using-stripecreatetoken","title":"Charges using stripe.createToken()","text":"<p>This predates <code>stripe.createSource</code>, and creates legacy Card objects within Stripe, which have some compatibility issues with Payment Methods.</p> <p>If you're using <code>stripe.createToken</code>, see if you can upgrade to <code>stripe.createSource</code> or ideally to Payment Intents .</p> <p>Tip</p> <p>Checkout Card Elements Quickstart JS</p>"},{"location":"upgrade_dj_stripe/","title":"Upgrading dj-stripe Smooth and Carefully","text":""},{"location":"upgrade_dj_stripe/#background","title":"Background","text":"<p>In this article, we will share how to upgrade the <code>dj-stripe</code> package flawlessly and carefully.</p> <p>!! attention \"Important Note\"     Please keep in mind that <code>dj-stripe</code> always squashes the migration files.     Which means its migration files are completely changed, and leading to migration issues.     So, you can't immediately upgrade your package too far, for example, from <code>2.4.0</code> to <code>2.7.0</code> because it will cause breaking changes, especially in your database migrations.</p>"},{"location":"upgrade_dj_stripe/#how-to-do-it","title":"How to do it?","text":"<p>For example, if your <code>dj-stripe</code> version is <code>2.4.0</code> and your migration files are referring to the old version.</p> <p></p> <p>First, you need to find which version has that old migration. For example:</p> <ol> <li>Search for the latest version that is closest to your package version, for example: <code>2.4.0</code> to <code>2.5.0</code>.</li> <li>Visit this link to find it: https://github.com/dj-stripe/dj-stripe/tags</li> <li>Cross-check the release notes.</li> <li>Find which dj-stripe version is still compatible with your migration file, for example: <code>0006_2_3.py</code>.</li> <li>Find the last migration file of the latest version at https://github.com/dj-stripe/dj-stripe/tree/2.5.0/djstripe/migrations (for example: <code>0008_2_5.py</code>) (both files must exist; if not, it means the new version is no longer compatible with your version).</li> </ol> Old Migration New Migration <ol> <li>Update your <code>requirements.txt</code> file from <code>dj-stripe==2.4.0</code> to <code>dj-stripe==2.5.0</code></li> <li>Run the <code>manage.py migrate djstripe</code> command (this command must not fail; if it does, cross-check steps 1-6).</li> </ol> <pre><code>(env-my-project) \u279c  my-project git:(development) \u2717 docker-compose -f local.yml run django python manage.py migrate djstripe\n[+] Creating 3/0\n \u2714 Container my-project-redis-1     Running                                                                                                                                                                                  0.0s\n \u2714 Container my-project-mailhog-1   Running                                                                                                                                                                                  0.0s\n \u2714 Container my-project-postgres-1  Running                                                                                                                                                                                  0.0s\nPostgreSQL is available\nSystem check identified some issues:\n\nWARNINGS:\n?: (djstripe.W001) The Stripe API version has a non-default value of '2024-04-10'. Non-default versions are not explicitly supported, and may cause compatibility issues.\n    HINT: Use the dj-stripe default for Stripe API version: 2020-08-27\nOperations to perform:\n  Apply all migrations: djstripe\nRunning migrations:\n  Applying djstripe.0008_2_5... OK\n</code></pre> <ol> <li>And then, after migrating it, change your migration file to refer to the new version (e.g., from <code>0006_2_3</code> to <code>0008_2_5</code>).</li> </ol> <p></p> <ol> <li>Repeat the same process for higher version.</li> </ol> <p>If you have an issue with the Stripe version, we can also try upgrading it in the <code>requirements.txt</code> file. \\ Check out this issue for more information: https://github.com/dj-stripe/dj-stripe/issues/1842#issuecomment-1319185657.</p> <pre><code>stripe&gt;=4.0.0,&lt;5.0.0  # https://github.com/dj-stripe/dj-stripe/issues/1842#issuecomment-1319185657\n</code></pre>"},{"location":"upgrade_dj_stripe/#conclusion","title":"Conclusion","text":"<ol> <li>Find the closest version that compatible with your version (for doing migration).</li> <li>Update the dependency in <code>requirements.txt</code> file and then deploy it.</li> <li>Don't forget to run the <code>python manage.py migrate djstripe</code> command.</li> <li>Change your migration file to refer to the new version (e.g., from <code>0006_2_3</code> to <code>0008_2_5</code>), and then deploy it.</li> </ol>"},{"location":"upgrade_dj_stripe/#alternatives","title":"Alternatives","text":"<ul> <li>https://stackoverflow.com/a/31122841</li> </ul>"},{"location":"history/0_x/","title":"dj-stripe 0.x release notes","text":""},{"location":"history/0_x/#080-2015-12-30","title":"0.8.0 (2015-12-30)","text":"<ul> <li>better plan ordering documentation (Thanks @cjrh)</li> <li>added a confirmation page when choosing a subscription (Thanks     @chrissmejia, @areski)</li> <li>setup.py reverse dependency fix (#258/#268) (Thanks @ticosax)</li> <li>Dropped official support for Django 1.7 (no code changes were made)</li> <li>Python 3.5 support, Django 1.9.1 support</li> <li>Migration improvements (Thanks @michi88)</li> <li>Fixed \"Invoice matching query does not exist\" bug (#263)     (Thanks @mthornhill)</li> <li>Fixed duplicate content in account view (Thanks @areski)</li> </ul>"},{"location":"history/0_x/#070-2015-09-22","title":"0.7.0 (2015-09-22)","text":"<ul> <li>dj-stripe now responds to the invoice.created event     (Thanks @wahuneke)</li> <li>dj-stripe now cancels subscriptions and purges customers during sync     if they were deleted from the stripe dashboard (Thanks @unformatt)</li> <li>dj-stripe now checks for an active stripe subscription in the     <code>update_plan_quantity</code> call (Thanks @ctrengove)</li> <li>Event processing is now handled by \"event handlers\" - functions     outside of models that respond to various event types and subtypes.     Documentation on how to tie into the event handler system coming     soon. (Thanks @wahuneke)</li> <li>Experimental Python 3.5 support</li> <li>Support for Django 1.6 and lower is now officially gone.</li> <li>Much, much more!</li> </ul>"},{"location":"history/0_x/#060-2015-07-12","title":"0.6.0 (2015-07-12)","text":"<ul> <li>Support for Django 1.6 and lower is now deprecated.</li> <li>Improved test harness now tests coverage and pep8</li> <li>SubscribeFormView and ChangePlanView no longer populate self.error     with form errors</li> <li>InvoiceItems.plan can now be null (as it is with individual     charges), resolving #140 (Thanks @awechsler and @MichelleGlauser     for help troubleshooting)</li> <li>Email templates are now packaged during distribution.</li> <li>sync_plans now takes an optional api_key</li> <li>100% test coverage</li> <li>Stripe ID is now returned as part of each model's str method     (Thanks @areski)</li> <li>Customer model now stores card expiration month and year     (Thanks @jpadilla)</li> <li>Ability to extend subscriptions (Thanks @TigerDX)</li> <li>Support for plan heirarchies (Thanks @chrissmejia)</li> <li>Rest API endpoints for Subscriptions [contrib]     (Thanks @philippeluickx)</li> <li>Admin interface search by email funtionality is removed (#221)     (Thanks @jpadilla)</li> </ul>"},{"location":"history/0_x/#050-2015-05-25","title":"0.5.0 (2015-05-25)","text":"<ul> <li>Began deprecation of support for Django 1.6 and lower.</li> <li>Added formal support for Django 1.8.</li> <li>Removed the StripeSubscriptionSignupForm</li> <li>Removed <code>djstripe.safe_settings</code>. Settings are now all located in     <code>djstripe.settings</code></li> <li><code>DJSTRIPE_TRIAL_PERIOD_FOR_SUBSCRIBER_CALLBACK</code> can no longer be a     module string</li> <li>The sync_subscriber argument has been renamed from     subscriber_model to subscriber</li> <li>Moved available currencies to the DJSTRIPE_CURRENCIES setting     (Thanks @martinhill)</li> <li>Allow passing of extra parameters to stripe Charge API     (Thanks @mthornhill)</li> <li>Support for all available arguments when syncing plans     (Thanks @jamesbrobb)</li> <li>charge.refund() now returns the refunded charge object     (Thanks @mthornhill)</li> <li>Charge model now has captured field and a capture method     (Thanks @mthornhill)</li> <li>Subscription deleted webhook bugfix</li> <li>South migrations are now up to date (Thanks @Tyrdall)</li> </ul>"},{"location":"history/0_x/#040-2015-04-05","title":"0.4.0 (2015-04-05)","text":"<ul> <li>Formal Python 3.3+/Django 1.7 Support (including migrations)</li> <li>Removed Python 2.6 from Travis CI build. (Thanks @audreyr)</li> <li>Dropped Django 1.4 support. (Thanks @audreyr)</li> <li>Deprecated the <code>djstripe.forms.StripeSubscriptionSignupForm</code>. Making     this form work easily with both <code>dj-stripe</code> and <code>django-allauth</code>     required too much abstraction. It will be removed in the 0.5.0     release.</li> <li>Add the ability to add invoice items for a customer (Thanks @kavdev)</li> <li>Add the ability to use a custom customer model (Thanks @kavdev)</li> <li>Added setting to disable Invoice receipt emails (Thanks Chris     Halpert)</li> <li>Enable proration when customer upgrades plan, and pass proration     policy and cancellation at period end for upgrades in settings.     (Thanks Yasmine Charif)</li> <li>Removed the redundant context processor. (Thanks @kavdev)</li> <li>Fixed create a token call in change_card.html (Thanks @dollydagr)</li> <li>Fix <code>charge.dispute.closed</code> typo. (Thanks @ipmb)</li> <li>Fix contributing docs formatting. (Thanks @audreyr)</li> <li>Fix subscription canceled_at_period_end field sync on plan     upgrade (Thanks @nigma)</li> <li>Remove \"account\" bug in Middleware (Thanks @sromero84)</li> <li>Fix correct plan selection on subscription in subscribe_form     template. (Thanks Yasmine Charif)</li> <li>Fix subscription status in account, _subscription_status, and     cancel_subscription templates. (Thanks Yasmine Charif)</li> <li>Now using <code>user.get_username()</code> instead of <code>user.username</code>, to     support custom User models. (Thanks @shvechikov)</li> <li>Update remaining DOM Ids for Bootstrap 3. (Thanks Yasmine Charif)</li> <li>Update publish command in setup.py. (Thanks @pydanny)</li> <li>Explicitly specify tox's virtual environment names.     (Thanks @audreyr)</li> <li>Manually call django.setup() to populate apps registry.     (Thanks @audreyr)</li> </ul>"},{"location":"history/0_x/#035-2014-05-01","title":"0.3.5 (2014-05-01)","text":"<ul> <li>Fixed <code>djstripe_init_customers</code> management command so it works with     custom user models.</li> </ul>"},{"location":"history/0_x/#034-2014-05-01","title":"0.3.4 (2014-05-01)","text":"<ul> <li>Clarify documentation for redirects on app_name.</li> <li>If settings.DEBUG is True, then django-debug-toolbar is exempt from     redirect to subscription form.</li> <li>Use collections.OrderedDict to ensure that plans are listed in order     of price.</li> <li>Add <code>ordereddict</code> library to support Python 2.6 users.</li> <li>Switch from <code>__unicode__</code> to <code>__str__</code> methods on models to better     support Python 3.</li> <li>Add <code>python_2_unicode_compatible</code> decorator to Models.</li> <li>Check for PY3 so the <code>unicode(self.user)</code> in models.Customer doesn't     blow up in Python 3.</li> </ul>"},{"location":"history/0_x/#033-2014-04-24","title":"0.3.3 (2014-04-24)","text":"<ul> <li>Increased the extendability of the views by removing as many     hard-coded URLs as possible and replacing them with <code>success_url</code>     and other attributes/methods.</li> <li>Added single unit purchasing to the cookbook</li> </ul>"},{"location":"history/0_x/#032-2014-01-16","title":"0.3.2 (2014-01-16)","text":"<ul> <li>Made Yasmine Charif a core committer</li> <li>Take into account trial days in a subscription plan (Thanks Yasmine     Charif)</li> <li>Correct invoice period end value (Thanks Yasmine Charif)</li> <li>Make plan cancellation and plan change consistently not prorating     (Thanks Yasmine Charif)</li> <li>Fix circular import when ACCOUNT_SIGNUP_FORM_CLASS is defined     (Thanks Dustin Farris)</li> <li>Add send e-mail receipt action in charges admin panel (Thanks Buddy     Lindsay)</li> <li>Add <code>created</code> field to all ModelAdmins to help with internal     auditing (Thanks Kulbir Singh)</li> </ul>"},{"location":"history/0_x/#031-2013-11-14","title":"0.3.1 (2013-11-14)","text":"<ul> <li>Cancellation fix (Thanks Yasmine Charif)</li> <li>Add setup.cfg for wheel generation (Thanks Charlie Denton)</li> </ul>"},{"location":"history/0_x/#030-2013-11-12","title":"0.3.0 (2013-11-12)","text":"<ul> <li>Fully tested against Django 1.6, 1.5, and 1.4</li> <li>Fix boolean default issue in models (from now on they are all     default to <code>False</code>).</li> <li>Replace duplicated code with     <code>djstripe.utils.user_has_active_subscription</code>.</li> </ul>"},{"location":"history/0_x/#029-2013-09-06","title":"0.2.9 (2013-09-06)","text":"<ul> <li>Cancellation added to views.</li> <li>Support for kwargs on charge and invoice fetching.</li> <li>def charge() now supports send_receipt flag, default to True.</li> <li>Fixed templates to work with Bootstrap 3.0.0 column design.</li> </ul>"},{"location":"history/0_x/#028-2013-09-02","title":"0.2.8 (2013-09-02)","text":"<ul> <li>Improved usage documentation.</li> <li>Corrected order of fields in StripeSubscriptionSignupForm.</li> <li>Corrected transaction history template layout.</li> <li>Updated models to take into account when settings.USE_TZ is     disabled.</li> </ul>"},{"location":"history/0_x/#027-2013-08-24","title":"0.2.7 (2013-08-24)","text":"<ul> <li>Add handy rest_framework permission class.</li> <li>Fixing attribution for django-stripe-payments.</li> <li>Add new status to Invoice model.</li> </ul>"},{"location":"history/0_x/#026-2013-08-20","title":"0.2.6 (2013-08-20)","text":"<ul> <li>Changed name of division tag to djdiv.</li> <li>Added <code>safe_setting.py</code> module to handle edge cases when working     with custom user models.</li> <li>Added cookbook page in the documentation.</li> </ul>"},{"location":"history/0_x/#025-2013-08-18","title":"0.2.5 (2013-08-18)","text":"<ul> <li>Fixed bug in initial checkout</li> <li>You can't purchase the same plan that you currently have.</li> </ul>"},{"location":"history/0_x/#024-2013-08-18","title":"0.2.4 (2013-08-18)","text":"<ul> <li>Recursive package finding.</li> </ul>"},{"location":"history/0_x/#023-2013-08-16","title":"0.2.3 (2013-08-16)","text":"<ul> <li>Fix packaging so all submodules are loaded</li> </ul>"},{"location":"history/0_x/#022-2013-08-15","title":"0.2.2 (2013-08-15)","text":"<ul> <li>Added Registration + Subscription form</li> </ul>"},{"location":"history/0_x/#021-2013-08-12","title":"0.2.1 (2013-08-12)","text":"<ul> <li>Fixed a bug on CurrentSubscription tests</li> <li>Improved usage documentation</li> <li>Added to migration from other tools documentation</li> </ul>"},{"location":"history/0_x/#020-2013-08-12","title":"0.2.0 (2013-08-12)","text":"<ul> <li>Cancellation of plans now works.</li> <li>Upgrades and downgrades of plans now work.</li> <li>Changing of cards now works.</li> <li>Added breadcrumbs to improve navigation.</li> <li>Improved installation instructions.</li> <li>Consolidation of test instructions.</li> <li>Minor improvement to django-stripe-payments documentation</li> <li>Added coverage.py to test process.</li> <li>Added south migrations.</li> <li>Fixed the subscription_payment_required function-based view     decorator.</li> <li>Removed unnecessary django-crispy-forms</li> </ul>"},{"location":"history/0_x/#017-2013-08-08","title":"0.1.7 (2013-08-08)","text":"<ul> <li>Middleware excepts all of the djstripe namespaced URLs. This way     people can pay.</li> </ul>"},{"location":"history/0_x/#016-2013-08-08","title":"0.1.6 (2013-08-08)","text":"<ul> <li>Fixed a couple template paths</li> <li>Fixed the manifest so we include html, images.</li> </ul>"},{"location":"history/0_x/#015-2013-08-08","title":"0.1.5 (2013-08-08)","text":"<ul> <li>Fixed the manifest so we include html, css, js, images.</li> </ul>"},{"location":"history/0_x/#014-2013-08-08","title":"0.1.4 (2013-08-08)","text":"<ul> <li>Change PaymentRequiredMixin to SubscriptionPaymentRequiredMixin</li> <li>Add subscription_payment_required function-based view decorator</li> <li>Added SubscriptionPaymentRedirectMiddleware</li> <li>Much nicer accounts view display</li> <li>Much improved subscription form display</li> <li>Payment plans can have decimals</li> <li>Payment plans can have custom images</li> </ul>"},{"location":"history/0_x/#013-2013-08-7","title":"0.1.3 (2013-08-7)","text":"<ul> <li>Added account view</li> <li>Added Customer.get_or_create method</li> <li>Added djstripe_sync_customers management command</li> <li>sync file for all code that keeps things in sync with stripe</li> <li>Use client-side JavaScript to get history data asynchronously</li> <li>More user friendly action views</li> </ul>"},{"location":"history/0_x/#012-2013-08-6","title":"0.1.2 (2013-08-6)","text":"<ul> <li>Admin working</li> <li>Better publish statement</li> <li>Fix dependencies</li> </ul>"},{"location":"history/0_x/#011-2013-08-6","title":"0.1.1 (2013-08-6)","text":"<ul> <li>Ported internals from django-stripe-payments</li> <li>Began writing the views</li> <li>Travis-CI</li> <li>All tests passing on Python 2.7 and 3.3</li> <li>All tests passing on Django 1.4 and 1.5</li> <li>Began model cleanup</li> <li>Better form</li> <li>Provide better response from management commands</li> </ul>"},{"location":"history/0_x/#010-2013-08-5","title":"0.1.0 (2013-08-5)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"history/1_x/","title":"dj-stripe 1.x release notes","text":""},{"location":"history/1_x/#124-2019-02-27","title":"1.2.4 (2019-02-27)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Allow billing_cycle_anchor argument when creating a subscription     (#814)</li> <li>Fixup plan amount null with tier plans (#781)</li> <li>Update Cancel subscription view tests to match backport in f64af57</li> <li>Implement Invoice._manipulate_stripe_object_hook for     compatability with API 2018-11-08 (#771)</li> <li>Fix product webhook for type=\"good\" (#724)</li> <li>Add trial_from_plan, trial_period_days args to     Customer.subscribe() (#709)</li> </ul>"},{"location":"history/1_x/#123-2018-10-13","title":"1.2.3 (2018-10-13)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Updated Subscription.cancel() for compatibility with Stripe     2018-08-23 (#723)</li> </ul>"},{"location":"history/1_x/#122-2018-08-11","title":"1.2.2 (2018-08-11)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed an error with request.urlconf in some setups (#562)</li> <li>Always save text-type fields as empty strings in db instead of null     (#713)</li> <li>Fix support for DJSTRIPE_SUBSCRIBER_MODEL_MIGRATION_DEPENDENCY     (#707)</li> <li>Fix reactivate() with Stripe API 2018-02-28 and above</li> </ul>"},{"location":"history/1_x/#121-2018-07-18","title":"1.2.1 (2018-07-18)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed various Python 2.7 compatibility issues</li> <li>Fixed issues with max_length of receipt_number</li> <li>Fixed various fields incorrectly marked as required</li> <li>Handle product webhook calls</li> <li>Fix compatibility with stripe-python 2.0.0</li> </ul>"},{"location":"history/1_x/#120-2018-06-11","title":"1.2.0 (2018-06-11)","text":"<p>The dj-stripe 1.2.0 release resets all migrations.</p> <p>Do not upgrade to 1.2.0 directly from 1.0.1 or below. You must upgrade to 1.1.0 first.</p> <p>Please read the 1.1.0 release notes below for more information.</p>"},{"location":"history/1_x/#110-2018-06-11","title":"1.1.0 (2018-06-11)","text":"<p>In dj-stripe 1.1.0, we made a lot of changes to models in order to bring the dj-stripe model state much closer to the upstream API objects. If you are a current user of dj-stripe, you will most likely have to make changes in order to upgrade. Please read the full changelog below. If you are having trouble upgrading, you may ask for help by filing an issue on GitHub.</p>"},{"location":"history/1_x/#migration-reset","title":"Migration reset","text":"<p>The next version of dj-stripe, 1.2.0, will reset all the migrations to <code>0001_initial</code>. Migrations are currently in an unmaintainable state.</p> <p>What this means is you will not be able to upgrade directly to dj-stripe 1.2.0. You must go through 1.1.0 first, run ``manage.py migrate djstripe``, then upgrade to 1.2.0.</p>"},{"location":"history/1_x/#python-27-end-of-life","title":"Python 2.7 end-of-life","text":"<p>dj-stripe 1.1.0 drops support for Django 1.10 and adds support for Django 2.0. Django 1.11+ and Python 2.7+ or 3.4+ are required.</p> <p>Support for Python versions older than 3.5, and Django versions older than 2.0, will be dropped in dj-stripe 2.0.0.</p>"},{"location":"history/1_x/#backwards-incompatible-changes-and-deprecations","title":"Backwards-incompatible changes and deprecations","text":""},{"location":"history/1_x/#removal-of-polymorphic-models","title":"Removal of polymorphic models","text":"<p>The model architecture of dj-stripe has been simplified. Polymorphic models have been dropped and the old base StripeCustomer, StripeCharge, StripeInvoice, etc models have all been merged into the top-level Customer, Charge, Invoice, etc models.</p> <p>Importing those legacy models from <code>djstripe.stripe_objects</code> will yield the new ones. This is deprecated and support for this will be dropped in dj-stripe 2.0.0.</p>"},{"location":"history/1_x/#full-support-for-stripe-sources-support-for-v3-stripejs","title":"Full support for Stripe Sources (Support for v3 stripe.js)","text":"<p>Stripe sources (<code>src_XXXX</code>) are objects that can arbitrarily reference any of the payment method types that Stripe supports. However, the legacy <code>Card</code> object (with object IDs like <code>card_XXXX</code> or <code>cc_XXXX</code>) is not a Source object, and cannot be turned into a Source object at this time.</p> <p>In order to support both Card and Source objects in ForeignKeys, a new model <code>PaymentMethod</code> has been devised (renamed to <code>DjstripePaymentMethod</code> in 2.0). That model can resolve into a Card, a Source, or a BankAccount object.</p> <ul> <li>The ``default_source`` attribute on ``Customer`` now     refers to a ``PaymentMethod`` object. You will need to call     <code>.resolve()</code> on it to get the Card or Source in question.</li> <li>References to <code>Customer.sources</code> expecting a queryset of Card     objects should be updated to <code>Customer.legacy_cards</code>.</li> <li>The legacy <code>StripeSource</code> name refers to the <code>Card</code> model. This will     be removed in dj-stripe 2.0.0. Update your references to either     <code>Card</code> or <code>Source</code>.</li> <li><code>enums.SourceType</code> has been renamed to <code>enums.LegacySourceType</code>.     <code>enums.SourceType</code> now refers to the actual Stripe Source types     enum.</li> </ul>"},{"location":"history/1_x/#core-fields-renamed","title":"Core fields renamed","text":"<ul> <li>The numeric <code>id</code> field has been renamed to <code>djstripe_id</code>. This     avoids a clash with the upstream stripe id. Accessing <code>.id</code> is     deprecated and **will reference the upstream <code>stripe_id</code> in     dj-stripe 2.0.0</li> </ul>"},{"location":"history/1_x/#100-2017-08-12","title":"1.0.0 (2017-08-12)","text":"<p>It's finally here! We've made significant changes to the codebase and are now compliant with stripe API version 2017-06-05.</p> <p>I want to give a huge thanks to all of our contributors for their help in making this happen, especially Bill Huneke (@wahuneke) for his impressive design work and @jleclanche for really pushing this release along.</p> <p>I also want to welcome onboard two more maintainers, @jleclanche and @lskillen. They've stepped up and have graciously dedicated their resources to making dj-stripe such an amazing package.</p> <p>Almost all methods now mimic the parameters of those same methods in the stripe API. Note that some methods do not have some parameters implemented. This is intentional. That being said, expect all method signatures to be different than those in previous versions of dj-stripe.</p> <p>Finally, please note that there is still a bit of work ahead of us. Not everything in the Stripe API is currently supported by dj-stripe -- we're working on it. That said, v1.0.0 has been thoroughly tested and is verified stable in production applications.</p>"},{"location":"history/1_x/#a-few-things-to-get-excited-for","title":"A few things to get excited for","text":"<ul> <li>Multiple subscription support (finally)</li> <li>Multiple sources support (currently limited to Cards)</li> <li>Idempotency support (See #455, #460 for discussion -- big thanks     to @jleclanche)</li> <li>Full model documentation</li> <li>Objects that come through webhooks are now tied to the API version     set in dj-stripe. No more errors if dj-stripe falls behind the     newest stripe API version.</li> <li>Any create/update action on an object automatically syncs the     object.</li> <li>Concurrent LIVE and TEST mode support (Thanks to @jleclanche). Note     that you'll run into issues if <code>livemode</code> isn't set on your existing     customer objects.</li> <li>All choices are now enum-based (Thanks @jleclanche, See #520).     Access them from the new <code>djstripe.enums</code> module. The ability to     check against model property based choices will be deprecated in 1.1</li> <li>Support for the Coupon model, and coupons on Customer objects.</li> <li>Support for the Payout/Transfer     split from api     version <code>2017-04-06</code>.</li> </ul>"},{"location":"history/1_x/#what-still-needs-to-be-done-in-v110","title":"What still needs to be done (in v1.1.0)","text":"<ul> <li> <p>Documentation. Our original documentation was not very helpful,     but it covered the important bits. It will be very out of date after     this update and will need to be rewritten. If you feel like helping,     we could use all the help we can get to get this pushed out asap.</p> </li> <li> <p>Master sync re-write. This sounds scary, but really isn't. The     current management methods run sync methods on Customer that aren't     very helpful and are due for removal. My plan is to write something     that first updates local data (via <code>api_retrieve</code> and     <code>sync_from_stripe_data</code>) and then pulls all objects from Stripe and     populates the local database with any records that don't already     exist there.</p> <p>You might be wondering, \"Why are they releasing this if there are only a few things left?\" Well, that thinking turned this into a two year release... Trust me, this is a good thing.</p> </li> </ul>"},{"location":"history/1_x/#significant-changes-mostly-backwards-incompatible","title":"Significant changes (mostly backwards-incompatible)","text":"<ul> <li>Idempotency. #460 introduces idempotency keys and implements     idempotency for <code>Customer.get_or_create()</code>. Idempotency will be     enabled for all calls that need it.</li> <li>Improved Admin Interface. This is almost complete. See #451 and     #452.</li> <li>Drop non-trivial endpoint views. We're dropping everything     except the webhook endpoint and the subscription cancel endpoint.     See #428.</li> <li>Drop support for sending receipts. Stripe now handles this for     you. See #478.</li> <li>Drop support for plans as settings, including custom plan     hierarchy (if you want this, write something custom) and the dynamic     trial callback. We've decided to gut having plans as settings.     Stripe should be your source of truth; create your plans there and     sync them down manually. If you need to create plans locally for     testing, etc., simply use the ORM to create Plan models. The sync     rewrite will make this drop less annoying.</li> <li>Orphan Customer Sync. We will now sync Customer objects from     Stripe even if they aren't linked to local subscriber objects. You     can link up subscribers to those Customers manually.</li> <li>Concurrent Live and Test Mode. dj-stripe now supports test-mode     and live-mode Customer objects concurrently. As a result, the     User.customer One-to-One reverse-relationship is now the     User.djstripe_customers RelatedManager. (Thanks @jleclanche) #440.     You'll run into some dj-stripe check issues if you don't update your     KEY settings accordingly. Check our GitHub issue tracker for help on     this.</li> </ul>"},{"location":"history/1_x/#settings","title":"SETTINGS","text":"<ul> <li>The <code>PLAN_CHOICES</code>, <code>PLAN_LIST</code>, and <code>PAYMENT_PLANS</code> objects are     removed. Use Plan.objects.all() instead.</li> <li>The <code>plan_from_stripe_id</code> function is removed. Use     Plan.objects.get(stripe_id=)</li> </ul>"},{"location":"history/1_x/#syncing","title":"SYNCING","text":"<ul> <li>sync_plans no longer takes an api_key</li> <li>sync methods no longer take a <code>cu</code> parameter</li> <li>All sync methods are now private. We're in the process of building a     better syncing mechanism.</li> </ul>"},{"location":"history/1_x/#utilities","title":"UTILITIES","text":"<ul> <li>dj-stripe decorators now take a plan argument. If you're passing in     a custom test function to <code>subscriber_passes_pay_test</code>, be sure to     account for this new argument.</li> </ul>"},{"location":"history/1_x/#mixins","title":"MIXINS","text":"<ul> <li>The context provided by dj-stripe's mixins has changed.     <code>PaymentsContextMixin</code> now provides <code>STRIPE_PUBLIC_KEY</code> and <code>plans</code>     (changed to <code>Plan.objects.all()</code>). <code>SubscriptionMixin</code> now provides     <code>customer</code> and <code>is_plans_plural</code>.</li> <li>We've removed the SubscriptionPaymentRequiredMixin. Use     <code>@method_decorator(\"dispatch\",</code>subscription_payment_required<code>)</code>     instead.</li> </ul>"},{"location":"history/1_x/#middleware","title":"MIDDLEWARE","text":"<ul> <li>dj-stripe middleware doesn't support multiple subscriptions.</li> </ul>"},{"location":"history/1_x/#signals","title":"SIGNALS","text":"<ul> <li>Local custom signals are deprecated in favor of Stripe webhooks:</li> <li><code>cancelled</code> -&gt;     WEBHOOK_SIGNALS[\"customer.subscription.deleted\"]</li> <li><code>card_changed</code> -&gt; WEBHOOK_SIGNALS[\"customer.source.updated\"]</li> <li><code>subscription_made</code> -&gt;     WEBHOOK_SIGNALS[\"customer.subscription.created\"]</li> </ul>"},{"location":"history/1_x/#webhook-events","title":"WEBHOOK EVENTS","text":"<ul> <li>The Event Handlers designed by @wahuneke are the new way to handle     events that come through webhooks. Definitely take a look at     <code>event_handlers.py</code> and <code>webhooks.py</code>.</li> </ul>"},{"location":"history/1_x/#exceptions","title":"EXCEPTIONS","text":"<ul> <li><code>SubscriptionUpdateFailure</code> and <code>SubscriptionCancellationFailure</code>     exceptions are removed. There should no longer be a case where they     would have been useful. Catch native stripe errors in their place     instead.</li> </ul>"},{"location":"history/1_x/#models","title":"MODELS","text":"<p>CHARGE</p> <ul> <li> <p><code>Charge.charge_created</code> -&gt; <code>Charge.stripe_timestamp</code></p> </li> <li> <p><code>Charge.card_last_4</code> and <code>Charge.card_kind</code> are removed. Use     <code>Charge.source.last4</code> and <code>Charge.source.brand</code> (if the source is a     Card)</p> </li> <li> <p><code>Charge.invoice</code> is no longer a foreign key to the Invoice model.     <code>Invoice</code> now has a OneToOne relationship with <code>Charge</code>.     (<code>Charge.invoice</code> will still work, but will no longer be represented     in the database).</p> <p>CUSTOMER</p> </li> <li> <p>dj-stripe now supports test mode and live mode Customer objects     concurrently (See #440). As a result, the     <code>&lt;subscriber_model&gt;.customer</code> OneToOne reverse relationship is no     longer a thing. You should now instead add a <code>customer</code> property to     your subscriber model that checks whether you're in live or test     mode (see djstripe.settings.STRIPE_LIVE_MODE as an example) and     grabs the customer from <code>&lt;subscriber_model&gt;.djstripe_customers</code> with     a simple <code>livemode=</code> filter.</p> </li> <li> <p>Customer no longer has a <code>current_subscription</code> property. We've     added a <code>subscription</code> property that should suit your needs.</p> </li> <li> <p>With the advent of multiple subscriptions, the behavior of     <code>Customer.subscribe()</code> has changed. Before, <code>calling subscribe()</code>     when a customer was already subscribed to a plan would switch the     customer to the new plan with an option to prorate. Now calling     <code>subscribe()</code> simply subscribes that customer to a new plan in     addition to it's current subsription. Use <code>Subscription.update()</code> to     change a subscription's plan instead.</p> </li> <li> <p><code>Customer.cancel_subscription()</code> is removed. Use     <code>Subscription.cancel()</code> instead.</p> </li> <li> <p>The <code>Customer.update_plan_quantity()</code> method is removed. Use     <code>Subscription.update()</code> instead.</p> </li> <li> <p><code>CustomerManager</code> is now <code>SubscriptionManager</code> and works on the     <code>Subscription</code> model instead of the <code>Customer</code> model.</p> </li> <li> <p><code>Customer.has_valid_card()</code> is now <code>Customer.has_valid_source()</code>.</p> </li> <li> <p><code>Customer.update_card()</code> now takes an id. If the id is not supplied,     the default source is updated.</p> </li> <li> <p><code>Customer.stripe_customer</code> property is removed. Use     <code>Customer.api_retrieve()</code> instead.</p> </li> <li> <p>The <code>at_period_end</code> parameter of <code>Customer.cancel_subscription()</code>     now actually follows the     DJSTRIPE_PRORATION_POLICY     setting.</p> </li> <li> <p><code>Customer.card_fingerprint</code>, <code>Customer.card_last_4</code>,     <code>Customer.card_kind</code>, <code>Customer.card_exp_month</code>,     <code>Customer.card_exp_year</code> are all removed. Check     <code>Customer.default_source</code> (if it's a Card) or one of the sources in     <code>Customer.sources</code> (again, if it's a Card) instead.</p> </li> <li> <p>The <code>invoice_id</code> parameter of <code>Customer.add_invoice_item</code> is now     named <code>invoice</code> and can be either an Invoice object or the     stripe_id of an Invoice.</p> <p>EVENT</p> </li> <li> <p><code>Event.kind</code> -&gt; <code>Event.type</code></p> </li> <li> <p>Removed <code>Event.validated_message</code>. Just check if the event is valid</p> <ul> <li>no need to double check (we do that for you)</li> </ul> <p>TRANSFER</p> </li> <li> <p>Removed <code>Transfer.update_status()</code></p> </li> <li> <p>Removed <code>Transfer.event</code></p> </li> <li> <p><code>TransferChargeFee</code> is removed. It hasn't been used in a while due     to a broken API version. Use <code>Transfer.fee_details</code> instead.</p> </li> <li> <p>Any fields that were in <code>Transfer.summary</code> no longer exist and are     therefore deprecated (unused but not removed from the database).     Because of this, <code>TransferManager</code> now only aggregates <code>total_sum</code></p> <p>INVOICE</p> </li> <li> <p><code>Invoice.attempts</code> -&gt; <code>Invoice.attempt_count</code></p> </li> <li> <p>InvoiceItems are no longer created when Invoices are synced. You     must now sync InvoiceItems directly.</p> <p>INVOICEITEM</p> </li> <li> <p>Removed <code>InvoiceItem.line_type</code></p> <p>PLAN</p> </li> <li> <p>Plan no longer has a <code>stripe_plan</code> property. Use <code>api_retrieve()</code>     instead.</p> </li> <li> <p><code>Plan.currency</code> no longer uses choices. Use the     <code>get_supported_currency_choices()</code> utility and create your own     custom choices list instead.</p> </li> <li> <p>Plan interval choices are now in <code>Plan.INTERVAL_TYPE_CHOICES</code></p> <p>SUBSCRIPTION</p> </li> <li> <p><code>Subscription.is_period_current()</code> now checks for a current trial     end if the current period has ended. This change means subscriptions     extended with <code>Subscription.extend()</code> will now be seen as valid.</p> </li> </ul>"},{"location":"history/1_x/#migrations","title":"MIGRATIONS","text":"<p>We'll sync your current records with Stripe in a migration. It will take a while, but it's the only way we can ensure data integrity. There were some fields for which we needed to temporarily add placeholder defaults, so just make sure you have a customer with ID 1 and a plan with ID 1 and you shouldn't run into any issues (create dummy values for these if need be and delete them after the migration).</p>"},{"location":"history/1_x/#big-huge-note-dont-overlook-this","title":"BIG HUGE NOTE - DON'T OVERLOOK THIS","text":"<p>Warning</p> <p>Subscription and InvoiceItem migration is not possible because old records don't have Stripe IDs (so we can't sync them). Our approach is to delete all local subscription and invoiceitem objects and re-sync them from Stripe.</p> <p>We 100% recommend you create a backup of your database before performing this upgrade.</p>"},{"location":"history/1_x/#other-changes","title":"Other changes","text":"<ul> <li>Postgres users now have access to the     <code>DJSTRIPE_USE_NATIVE_JSONFIELD</code> setting. (Thanks @jleclanche) #517,     #523</li> <li>Charge receipts now take <code>DJSTRIPE_SEND_INVOICE_RECEIPT_EMAILS</code> into     account (Thanks @r0fls)</li> <li>Clarified/modified installation documentation (Thanks @pydanny)</li> <li>Corrected and revised ANONYMOUS_USER_ERROR_MSG (Thanks @pydanny)</li> <li>Added fnmatching to <code>SubscriptionPaymentMiddleware</code>     (Thanks @pydanny)</li> <li><code>SubscriptionPaymentMiddleware.process_request()</code> functionality     broken up into multiple methods, making local customizations easier     (Thanks @pydanny)</li> <li>Fully qualified events are now supported by event handlers as     strings e.g. 'customer.subscription.deleted' (Thanks @lskillen)     #316</li> <li>runtests now accepts positional arguments for declaring which tests     to run (Thanks @lskillen) #317</li> <li>It is now possible to reprocess events in both code and the admin     interface (Thanks @lskillen) #318</li> <li>The confirm page now checks that a valid card exists.     (Thanks @scream4ik) #325</li> <li>Added support for viewing upcoming invoices (Thanks @lskillen) #320</li> <li>Event handler improvements and bugfixes (Thanks @lskillen) #321</li> <li>API list() method bugfixes (Thanks @lskillen) #322</li> <li>Added support for a custom webhook event handler (Thanks @lskillen)     #323</li> <li>Django REST Framework contrib package improvements     (Thanks @aleccool213) #334</li> <li>Added <code>tax_percent</code> to CreateSubscriptionSerializer     (Thanks @aleccool213) #349</li> <li>Fixed incorrectly assigned <code>application_fee</code> in Charge calls     (Thanks @kronok) #382</li> <li>Fixed bug caused by API change (Thanks @jessamynsmith) #353</li> <li>Added inline documentation to pretty much everything and enforced     docsytle via flake8 (Thanks @aleccool213)</li> <li>Fixed outdated method call in template (Thanks @kandoio) #391</li> <li>Customer is correctly purged when subscriber is deleted, regardless     of how the deletion happened (Thanks @lskillen) #396</li> <li>Test webhooks are now properly captured and logged. No more bounced     requests to Stripe! (Thanks @jameshiew) #408</li> <li>CancelSubscriptionView redirect is now more flexible     (Thanks @jleclanche) #418</li> <li>Customer.sync_cards() (Thanks @jleclanche) #438</li> <li>Many stability fixes, bugfixes, and code cleanup     (Thanks @jleclanche)</li> <li>Support syncing canceled subscriptions (Thanks @jleclanche) #443</li> <li>Improved admin interface (Thanks @jleclanche with @jameshiew) #451</li> <li>Support concurrent TEST + LIVE API keys (Fix webhook event     processing for both modes) (Thanks @jleclanche) #461</li> <li>Added Stripe Dashboard link to admin change panel     (Thanks @jleclanche) #465</li> <li>Implemented <code>Plan.amount_in_cents</code> (Thanks @jleclanche) #466</li> <li>Implemented <code>Subscription.reactivate()</code> (Thanks @jleclanche) #470</li> <li>Added <code>Plan.human_readable_price</code> (Thanks @jleclanche) #498</li> <li>(Re)attach the Subscriber when we find it's id attached to a     customer on Customer sync (Thanks @jleclanche) #500</li> <li>Made API version configurable (with dj-stripe recommended default)     (Thanks @lskillen) #504</li> </ul>"},{"location":"history/2_4_0/","title":"dj-stripe 2.4.0 release notes (2020-11-19)","text":"<p>Attention</p> <p>To upgrade to 2.4.0 from older versions of dj-stripe, scroll down to the Upgrade Guide.</p>"},{"location":"history/2_4_0/#introducing-sponsorships-and-our-first-sponsor","title":"Introducing sponsorships and our first sponsor","text":"<p>We're excited to introduce our Sponsorship tiers. Individuals may back dj-stripe to assist with development. Larger backers may choose one the paid support plans available to receive support on top of ensuring the long-term viability of the project!</p> <p>And this release was made possible by none other than\u2026 Stripe! Our very first Gold sponsor. Their financial backing has allowed us to pour a lot of work that could not have otherwise happened.</p>"},{"location":"history/2_4_0/#release-notes","title":"Release notes","text":"<ul> <li>Support for Django 3.1 and Python 3.8.</li> <li>Minimum stripe-python version is now 2.48.0.</li> <li>Default Stripe API version is now <code>2020-08-27</code>.</li> <li>First-class support for the Price model, replacing Plans.</li> <li>Support multi-item subscriptions.</li> <li>Support for API keys in the database (see Managing Stripe API     keys).</li> <li>Support for syncing objects for multiple, different Stripe accounts.</li> <li>Use Django 3.1 native JSONField when available.</li> <li>The field <code>djstripe_owner_account</code> has been added to all Stripe models, and is     automatically populated with the Account that owns the API key used to retrieve it.</li> <li>Support for subscription schedules (#899).</li> <li>Add support for Reporting categories and TaxIds</li> <li>Update many models to match latest version of the Stripe API.</li> <li>Fixed Account.get_default_account() for Restricted API Keys.</li> <li>Allow passing arbitrary arguments (any valid SDK argument) to the following methods:<ul> <li><code>Customer.charge()</code></li> <li><code>Customer.subscribe()</code>,</li> <li><code>Charge.capture()</code></li> <li><code>Subscription.update()</code></li> </ul> </li> <li>New management command: <code>djstripe_update_invoiceitem_ids</code>. This command migrates     InvoiceItems using Stripe's old IDs to the new ones.</li> <li>Hundreds of other bugfixes.</li> </ul>"},{"location":"history/2_4_0/#new-feature-in-database-stripe-api-keys","title":"New feature: in-database Stripe API keys","text":"<p>Stripe API keys are now stored in the database, and are now editable in the admin.</p> <p>Warning</p> <p>By default, all keys are visible by anyone who has access to the dj-stripe administration.</p>"},{"location":"history/2_4_0/#why","title":"Why?","text":"<p>As we work on supporting multiple Stripe accounts per instance, it is vital for dj-stripe to have a mechanism to store more than one Stripe API key. It also became obvious that we may want proper programmatic access to create and delete keys. Furthermore, API keys are a legitimate upstream Stripe object, and it is not unlikely the API may allow access to listing other API keys in the future, in which case we will want to move them to the database anyway.</p> <p>In the next release, we are planning to make WebhookEndpoints (and thus webhook secrets) manageable via the database as well.</p>"},{"location":"history/2_4_0/#do-i-need-to-change-anything","title":"Do I need to change anything?","text":"<p>Not at this time. The settings <code>STRIPE_LIVE_SECRET_KEY</code> and <code>STRIPE_TEST_SECRET_KEY</code> can still be used. Their values will however be automatically saved to the database at the earliest opportunity.</p>"},{"location":"history/2_4_0/#what-about-public-keys","title":"What about public keys?","text":"<p>Setting <code>STRIPE_LIVE_PUBLIC_KEY</code> and <code>STRIPE_TEST_PUBLIC_KEY</code> will be deprecated next release. You do not risk anything by leaving them in your settings: They are not used by Dj-Stripe outside of the Dj-Stripe mixins, which are now themselves deprecated. So you can safely leave them in your settings, or you can move them to the database as well (Keys beginning in <code>pk_test_</code> and <code>pk_live_</code> will be detected as publishable keys).</p>"},{"location":"history/2_4_0/#deprecated-features","title":"Deprecated features","text":"<p>Nobody likes features being removed. However, the last few releases we have had to remove features that were not core to what dj-stripe does, or simply poorly-maintained. To keep up with the trend, we are making three major deprecations this release:</p>"},{"location":"history/2_4_0/#creating-plans-from-the-django-admin-is-no-longer-supported","title":"Creating Plans from the Django Admin is no longer supported","text":"<p>The <code>Plan</code> model was special cased in various places, including being the only one which supported being created from the Django administration. This is no longer supported. We have plans to allow creating arbitrary Stripe objects from the Django Admin, but until it can be done consistently, we have decided to remove the feature for Plans (which are deprecated by Stripe anyway). The only object type you should be dealing with from the admin is the new APIKey model.</p> <p>Along with this, we are also deprecating the <code>djstripe_sync_plans_from_stripe</code> management command. You can instead use the <code>djstripe_sync_models</code> management command, which supports arbitrary models.</p>"},{"location":"history/2_4_0/#deprecating-the-rest-api","title":"Deprecating the REST API","text":"<p>We are dropping all support for the REST API and will be fully removing it in 2.5.0. We're doing this because we wish to keep such an API separate from dj-stripe. Work has already started on a new project, and we will be sharing more details about it soon. If you're interested in helping out, please reach out on Github!</p>"},{"location":"history/2_4_0/#deprecating-djstripemiddlewaresubscriptionpaymentmiddleware","title":"Deprecating <code>djstripe.middleware.SubscriptionPaymentMiddleware</code>","text":"<p>Large parts of dj-stripe, including this middleware, were designed before Stripe's major revamps of the old Plan model into Prices, Products, and multi-plan subscriptions. The functionality offered by the middleware is no longer adequate, and building on top of it would not be particularly robust. We may bring similar functionality back in the future, but the middleware as it is is going away (as well as the undocumented <code>djstripe.utils.subscriber_has_active_subscription</code> utility function).</p> <p>If you want to keep the functionality for your project, you may wish to copy the latest version of the middleware.</p>"},{"location":"history/2_4_0/#deprecating-djstripemixins","title":"Deprecating <code>djstripe.mixins</code>","text":"<p>This is being deprecated for similar reasons as the SubscriptionPaymentMiddleware. However, the mixins module was undocumented and never officially supported.</p>"},{"location":"history/2_4_0/#other-deprecations","title":"Other deprecations","text":"<ul> <li>The <code>account</code> field on <code>Charge</code> has been renamed to <code>on_behalf_of</code>, to be consistent     with Stripe's upstream model. Note that this field is separate from     <code>djstripe_owner_account</code>, which is set by dj-stripe itself to match the account of     the API key used.</li> <li><code>Account.get_connected_account_from_token()</code> is deprecated in favour of     <code>Account.get_or_retrieve_for_api_key()</code>, which supports more than just Connect     accounts.</li> <li><code>Customer.has_active_subscription()</code> is deprecated in favour of     <code>Customer.is_subscribed_to()</code>. Note that the former takes a plan as argument,     whereas the latter takes a product as argument.</li> <li>The <code>tax_percent</code> attribute of <code>Invoice</code> is no longer populated and will be removed     in 2.5.0. You may want to use <code>Invoice.default_tax_rates</code> instead, which uses the     new TaxId functionality.</li> <li><code>Customer.business_vat_id</code> is being deprecated in favour of using TaxId models     directly.</li> </ul>"},{"location":"history/2_4_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Rename PlanBillingScheme to BillingScheme.</li> <li> <p>Remove <code>Plan.update_name()</code> and these previously-deprecated fields:</p> <ul> <li><code>Customer.business_vat_id</code></li> <li><code>Subscription.start</code></li> <li><code>Subscription.billing</code></li> </ul> </li> </ul>"},{"location":"history/2_4_0/#upgrade-guide","title":"Upgrade Guide","text":"<p>Before you upgrade to dj-stripe 2.4.0, we recommend upgrading to dj-stripe 2.3.0. Upgrading one major release at a time minimizes the risk of issues arising.</p> <p>Upgrading directly to 2.4.0 from dj-stripe versions older than 2.2.0 is unsupported.</p> <p>To upgrade dj-stripe, run <code>pip install --upgrade dj-stripe==2.4.0</code>.</p> <p>Once installed, you can run <code>manage.py migrate djstripe</code> to migrate the database models.</p> <p>Attention</p> <p>If you are doing multiple major dj-stripe upgrades in a row, remember to run the migrate command after every upgrade. Skipping this step WILL cause errors.</p> <p>Note</p> <p>Migrating the database models may take a long time on databases with large amounts of customers.</p>"},{"location":"history/2_4_0/#settings-changes","title":"Settings changes","text":"<p>A new mandatory setting <code>DJSTRIPE_FOREIGN_KEY_TO_FIELD</code> has been added. If you are upgrading from an older version, you need to set it to <code>\"djstripe_id\"</code>.</p> <p>Setting it to <code>\"id\"</code> will make dj-stripe use the Stripe IDs as foreign keys. Although this is recommended for new installations, there is currently no migration available for going from <code>\"djstripe_id\"</code> to <code>\"id\"</code>.</p> <p>For more information on this setting, see Settings.</p>"},{"location":"history/2_4_x/","title":"dj-stripe 2.4.4 release notes (2021-05-22)","text":"<ul> <li>Fix syncing of tax IDs in management commands</li> <li>Set <code>default_auto_field</code> in migrations to prevent creation of extra migrations</li> <li>Misc test and documentation fixes</li> </ul>"},{"location":"history/2_4_x/#dj-stripe-243-release-notes-2021-02-08","title":"dj-stripe 2.4.3 release notes (2021-02-08)","text":"<ul> <li>Fix webhook error when processing events that contain a reference to a deleted     payment method (such as a refund on a payment whose card has been detached or     removed)</li> <li>Fix a couple of regressions in <code>djstripe_sync_models</code> management command.</li> </ul>"},{"location":"history/2_4_x/#dj-stripe-242-release-notes-2021-01-24","title":"dj-stripe 2.4.2 release notes (2021-01-24)","text":""},{"location":"history/2_4_x/#release-notes","title":"Release notes","text":"<ul> <li>Fix error in <code>Customer.add_card()</code> due to Stripe's <code>sources</code> deprecation. (#1293)</li> <li>Fix <code>Subscription.update()</code> usage of the deprecated Stripe <code>prorate</code> argument.     dj-stripe now explicitly uses <code>proration_behavior</code>, setting it to <code>\"none\"</code> when     <code>prorate</code> is <code>False</code>, and <code>\"create_prorations\"</code> when <code>prorate</code> is <code>True</code>.</li> </ul>"},{"location":"history/2_4_x/#dj-stripe-241-release-notes-2020-11-29","title":"dj-stripe 2.4.1 release notes (2020-11-29)","text":""},{"location":"history/2_4_x/#release-notes_1","title":"Release notes","text":"<ul> <li>Upgrade default Stripe API version to <code>2020-08-27</code>. Although we documented doing so     in 2.4.0, it was not correctly set as such. This has been fixed for consistency.</li> <li>The <code>Price</code> model was incorrectly released with an <code>amount_in_cents</code> property,     matching that of the <code>Plan</code> model. However, Price amounts are already in cent. The     property has been removed, use <code>unit_amount</code> instead.</li> <li>Fix <code>Price.human_readable_price</code> calculation</li> <li>Fix non-blank nullable <code>Charge</code> fields</li> <li>Fix Price.tiers not being synced correctly with <code>djstripe_sync_models</code> (#1284)</li> <li>Fix sync model recursion loop (see #1288)</li> </ul>"},{"location":"history/2_5_0/","title":"dj-stripe 2.5.0 (2021-06-06)","text":"<p>Attention</p> <p>It is not possible to upgrade to dj-stripe 2.5.0 from versions older than 2.2.2. To upgrade from an older version, first upgrade to <code>dj-stripe 2.2.2</code>.</p>"},{"location":"history/2_5_0/#release-notes","title":"Release notes","text":"<ul> <li>Minimum Python version is now 3.6.2.</li> <li>Support for Python 3.9 and Django 3.2.</li> <li>In keeping with upstream's cycle, Django 3.0 is no longer officially supported.     (Note that it will still work, because Django 2.2 LTS is still supported.)</li> <li>SQLite versions older than 3.26 are no longer supported.</li> <li>New models: FileLink, Mandate</li> <li>Cards and Bank Accounts are now visible in the admin interface.</li> <li>Lots of model sync fixes since 2.4.0.</li> </ul>"},{"location":"history/2_5_0/#deprecated-features","title":"Deprecated features","text":"<ul> <li>The <code>FileUpload</code> model has been renamed <code>File</code>, for consistency with Stripe's SDK.     Although the old name is still supported, it will eventually be removed.</li> <li>Deprecate <code>charge_immediately</code> argument to <code>Customer.subscribe()</code>. It did not behave     as expected on recent versions of Stripe. If you were using it set to     <code>charge_immediately=False</code>, you can instead pass <code>collection_method=\"send_invoice\"</code>,     which will send the Customer the invoice to manually pay, instead.</li> </ul>"},{"location":"history/2_5_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>When calling <code>Customer.delete()</code> in prior versions of dj-stripe, the Customer object     would be deleted in the upstream API and the Customer object would be retained but     with a <code>date_purged</code> attribute. This was the only model behaving this way, and it is     no longer the case. If you wish to purge a customer like before, you may call     <code>Customer.purge()</code> instead, though that method may be removed in future versions as     well.</li> <li>Remove deprecated DRF integration (<code>djstripe.contrib.rest_framework</code>)</li> <li>Remove deprecated <code>djstripe.decorators</code> module</li> <li>Remove deprecated <code>djstripe.middleware</code> module</li> <li>Remove deprecated fields <code>Account.business_vat_id</code> and <code>Subscription.tax_percent</code></li> <li>Remove deprecated method <code>Account.get_connected_account_from_token()</code>. Use     <code>Account.get_or_retrieve_for_api_key()</code> instead.</li> <li>Remove deprecated <code>Charge.account</code> property. Use <code>Charge.on_behalf_of</code> instead.</li> <li>Remove deprecated <code>Customer.has_active_subscription()</code> method. Use     <code>Customer.is_subscribed_to(product)</code> instead.</li> <li><code>FileUploadPurpose</code> enum has been renamed <code>FilePurpose</code>.</li> <li><code>FileUploadType</code> enum has been renamed <code>FileType</code>.</li> </ul>"},{"location":"history/2_5_x/","title":"dj-stripe 2.5.1 (2021-07-02)","text":""},{"location":"history/2_5_x/#release-notes","title":"Release notes","text":"<ul> <li>Fixed migration issue for new setups using custom <code>DJSTRIPE_CUSTOMER_MODEL</code>.</li> <li>Display correct JSON for JSONFields in the Django admin.</li> <li>Fix manual syncing of <code>SubscriptionItem</code>.</li> </ul>"},{"location":"history/2_6_0/","title":"dj-stripe 2.6.0 (2022-01-15)","text":"<p>Attention</p> <p>It is not possible to upgrade to dj-stripe 2.6.0 from versions older than 2.3.0. To upgrade from an older version, first upgrade to <code>dj-stripe 2.3.0</code>.</p>"},{"location":"history/2_6_0/#release-highlights","title":"Release highlights","text":"<ul> <li>Support for Python 3.10 and Django 4.0.</li> <li>New models: Mandate, Payout, UsageRecordSummary, WebhookEndpoint (unused)</li> <li>Significant improvements and fixes to Stripe Connect features.</li> <li>Storing Stripe API keys by adding them to the Admin is now supported.     This allows for use of multiple Stripe API keys (multiple Stripe accounts).</li> <li>Support for syncing Connect accounts via <code>djstripe_sync_models</code>.</li> </ul>"},{"location":"history/2_6_0/#deprecated-features","title":"Deprecated features","text":"<ul> <li>The use of the old <code>jsonfield</code>-based <code>JSONField</code> is deprecated and support for it     will be dropped in dj-stripe 2.8.0. <code>django.models.JSONField</code> is available since     Django 3.1.0. To switch to the newer JSONFields, set <code>DJSTRIPE_USE_NATIVE_JSONFIELD</code>     to <code>True</code>. Set it to <code>False</code> to remain on the <code>jsonfield</code>-powered text-based fields.     A manual migration is necessary to convert existing databases from text to json.</li> <li>The <code>DJSTRIPE_PRORATION_POLICY</code> setting is deprecated and will be ignored in 2.8.     Specify <code>proration_policy</code> in the <code>Subscription.update()</code> method explicitly instead.</li> <li><code>Customer.can_charge()</code> is now deprecated. This was a very misleading method which     resulted in incorrect behaviour when Customers had multiple payment methods. It will     be removed in dj-stripe 2.8.0. You can use <code>Customer.payment_methods.all()</code> instead.</li> <li>For similar reasons, <code>Customer.has_valid_source()</code> is deprecated and will be removed     in dj-stripe 2.8.0. You can use <code>Customer.sources.all()</code> instead.</li> </ul>"},{"location":"history/2_6_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Python 3.6 is no longer supported. The new minimum version of Python is 3.7.12.</li> <li>Django 2.2 and 3.1 are no longer supported.</li> <li><code>DJSTRIPE_USE_NATIVE_JSONFIELD</code> now defaults to <code>True</code>. If you previously had it set     to <code>False</code>, or did not have it set, you may want to explicitly set it to <code>False</code> in     order to support a pre-existing database. A migration path will later be provided     for this use case.</li> <li>The undocumented <code>get_stripe_api_version()</code> helper function has been removed.</li> <li>Settings for dj-stripe are now in <code>djstripe.settings.djstripe_settings</code> (as opposed     to top-level in <code>djstripe.settings</code>)</li> <li><code>Customer.subscribe()</code> method no longer accepts positional arguments, only keywords.</li> <li><code>charge_immediately</code> support in Customer.subscribe() has been removed (deprecated     in 2.4). Set <code>collection_method</code> instead.</li> <li>The <code>at_period_end</code> argument to <code>Subscription.cancel()</code> now defaults to <code>False</code>,     instead of the value of <code>DJSTRIPE_PRORATION_POLICY</code>.</li> </ul>"},{"location":"history/2_6_0/#other-changes","title":"Other changes","text":"<ul> <li>The Stripe Account that triggered an Event is now available on the field     <code>WebhookEventTrigger.stripe_trigger_account</code>.</li> <li>Fixed recursive fetch/update loop errors in <code>djstripe_sync_models</code>.</li> <li>Migrations have been optimized and should be faster.</li> <li>dj-stripe now checks the apparent validity of API keys used and will raise     <code>InvalidStripeAPIKey</code> if the API key looks completely incorrect.</li> <li><code>Customers</code> can now be subscribed to multiple prices and/or plans by passing the <code>items</code> argument     to <code>Customer.subscribe()</code>.</li> <li>Checkout Session metadata can be used to create/link a Stripe <code>Customer</code> to the     <code>Customer</code> instance specified by the <code>djstripe_settings.SUBSCRIBER_CUSTOMER_KEY</code>.</li> </ul>"},{"location":"history/2_6_x/","title":"dj-stripe 2.6.2 (2022-07-02)","text":"<p>This is a maintenance release to remove the generation of an unnecessary migration when running dj-stripe on Django 4.0. This release does not guarantee Django 4.0 compatibility. Run at your own risk.</p>"},{"location":"history/2_6_x/#release-notes","title":"Release notes","text":"<ul> <li>Update migrations to be compatible with Django 4.0</li> </ul>"},{"location":"history/2_6_x/#dj-stripe-261-2022-02-07","title":"dj-stripe 2.6.1 (2022-02-07)","text":""},{"location":"history/2_6_x/#release-notes_1","title":"Release notes","text":"<ul> <li>Fix issue saving a new WebhookEndpoint from the admin</li> <li>Fix potential IntegrityError when syncing models</li> </ul>"},{"location":"history/2_7_0/","title":"dj-stripe 2.7.0 (2022-10-17)","text":"<p>Attention</p> <p>It is not possible to upgrade to dj-stripe 2.7.0 from versions older than 2.4.0. To upgrade from an older version, first upgrade to dj-stripe 2.4.0.</p> <p>This release focuses on Webhook Endpoints. For more information on the reasoning behind the changes, please see the discussion on Github:</p> <p>https://github.com/dj-stripe/dj-stripe/discussions/1437</p>"},{"location":"history/2_7_0/#release-highlights","title":"Release highlights","text":"<ul> <li>Webhook Endpoints are now configured via the Django administration.</li> <li>Multiple Webhook Endpoints are now supported.</li> <li>Webhook Endpoints now have a unique, non-guessable URL.</li> </ul>"},{"location":"history/2_7_0/#deprecated-features","title":"Deprecated features","text":"<ul> <li>The <code>DJSTRIPE_WEBHOOK_URL</code> setting is deprecated. It will be removed in dj-stripe     2.9. It was added to give a way of \"hiding\" the webhook endpoint URL, but that is no     longer necessary with the new webhook endpoint system.</li> </ul>"},{"location":"history/2_7_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Remove the deprecated middleware <code>djstripe.middleware.SubscriptionPaymentMiddleware</code></li> <li>Remove support for the deprecated <code>DJSTRIPE_SUBSCRIPTION_REDIRECT</code> setting</li> <li>Remove support for the <code>DJSTRIPE_SUBSCRIPTION_REQUIRED_EXCEPTION_URLS</code> setting</li> </ul>"},{"location":"history/2_7_0/#other-changes","title":"Other changes","text":"<ul> <li>Many Stripe Connect related fixes (Special thanks to Dominik Bartenstein of Zemtu)</li> <li>Allow passing stripe kwargs in Subscription.cancel()</li> <li>Various admin improvements</li> <li>Add support for managing subscription schedules from the admin</li> </ul>"},{"location":"history/2_7_x/","title":"dj-stripe 2.7.3 (2022-11-26)","text":"<p>Due to Stripe dropping support for the <code>Order</code> model, we have had to restrict the Stripe SDK to versions below 5.0.0.</p> <p>This release thus fixes the following error:</p> <pre><code>AttributeError: module 'stripe' has no attribute 'Order'\n</code></pre> <p>More info: https://github.com/dj-stripe/dj-stripe/issues/1842</p> <p>If you are on an older version of dj-stripe and cannot upgrade, you may simply install an older version of the Stripe SDK, for example with <code>pip install stripe&lt;5.0.0</code>.</p>"},{"location":"history/2_7_x/#dj-stripe-272-2022-10-21","title":"dj-stripe 2.7.2 (2022-10-21)","text":""},{"location":"history/2_7_x/#release-notes","title":"Release notes","text":"<ul> <li>Fix installing with Poetry on Django 4.0 and higher</li> </ul>"},{"location":"history/2_7_x/#dj-stripe-271-2022-10-20","title":"dj-stripe 2.7.1 (2022-10-20)","text":""},{"location":"history/2_7_x/#release-notes_1","title":"Release notes","text":"<ul> <li>Remove an enum value generating an extra migration</li> <li>Allow Django 4.1 as a dependency (Note: Running dj-stripe 2.7.x with Django 4.1 is     untested)</li> </ul>"},{"location":"history/2_8_0/","title":"dj-stripe 2.8.0 (2023-06-28)","text":"<p>Attention</p> <p>It is not possible to upgrade to dj-stripe 2.8.0 from versions older than 2.5.0. To upgrade from an older version, first upgrade to dj-stripe 2.5.0.</p>"},{"location":"history/2_8_0/#release-highlights","title":"Release highlights","text":"<p>This release introduces support for Stripe Identity.</p> <p>It is also slated to be the last major release before dj-stripe 3.0, which will introduce significant, backwards-incompatible changes.</p> <ul> <li>Python 3.11 is now supported.</li> <li>Django 4.1 and 4.2 are now supported.</li> <li>Python 3.7 is no longer supported. Python 3.8 or higher is required.</li> <li>Added <code>LineItem</code> model.</li> <li>Added <code>Discount</code> model.</li> <li>Added <code>SourceTransaction</code>, <code>VerificationSession</code> and <code>VerificationReport</code> models.</li> </ul>"},{"location":"history/2_8_0/#deprecated-features","title":"Deprecated features","text":"<ul> <li><code>DJSTRIPE_WEBHOOK_EVENT_CALLBACK</code> is deprecated in favour of the new webhook signals.</li> <li><code>DJSTRIPE_WEBHOOK_TOLERANCE</code> is deprecated in favour of the new UUID webhooks <code>tolerance</code> model field.</li> </ul>"},{"location":"history/2_8_0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Remove legacy JSONField support. This drops support for installations with the     <code>DJSTRIPE_USE_NATIVE_JSONFIELD</code> setting set to <code>False</code>.     NOTE: No migration path is available yet.     https://github.com/dj-stripe/dj-stripe/issues/1820</li> <li>Remove <code>djstripe_sync_plans_from_stripe</code> command (deprecated in 2.4.0).     Use <code>djstripe_sync_models price</code> instead.</li> <li>Remove <code>Customer.can_charge()</code>, <code>Customer.has_valid_source()</code> ()</li> <li>Remove <code>DJSTRIPE_PRORATION_POLICY</code> setting (deprecated in 2.6.0)</li> <li>Remove deprecated <code>prorate</code> argument to <code>Subscription.update()</code> (Use Stripe's     <code>proration_behavior</code> argument instead)</li> <li>Remove undocumented <code>set_stripe_api_version()</code> helper function     and context manager <code>stripe_temporary_api_version()</code>.     The API version is now set on each request individually.</li> <li>Updated <code>Charge.refund(...)</code> helper function     to correctly create the desired refund. Note that the     created <code>Refund</code> object is now returned as opposed to     the <code>Charge</code> object.</li> <li>Resolved ambiguity between <code>LineItem</code> and <code>InvoiceItem</code> models. We previously     assumed that the <code>lines</code> List object on <code>Invoice</code> and <code>UpcomingInvoice</code> models only     return <code>InvoiceItem</code> objects. Moreover <code>LineItem</code> objects can also be of type     <code>subscription</code> if the user adds a Subscription to their <code>Invoice</code> as a lineitem.</li> </ul>"},{"location":"history/2_8_0/#other-changes","title":"Other changes","text":"<ul> <li>Updated the Stripe API key and webhook django system check to warning instead of critical.</li> <li>Added various missing model field to CheckoutSession and Payout models.</li> <li>Added support for running tests using the real Stripe API calls.</li> <li><code>stripe.api_version</code> is no longer manipulated by dj-stripe.</li> <li>New webhook signals are available:<ul> <li><code>djstripe.signals.webhook_pre_validate(instance, api_key)</code>: Fired before webhook validation</li> <li><code>djstripe.signals.webhook_post_validate(instance, api_key, valid)</code>: Fired after validation (even unsuccessful validations)</li> <li><code>djstripe.signals.webhook_pre_process(instance, api_key)</code>: Fired before webhook processing. Not fired if the validation failed.</li> <li><code>djstripe.signals.webhook_post_process(instance, api_key)</code>: Fired after webhook successful processing.</li> </ul> </li> <li><code>djstripe.signals.webhook_processing_error</code> now also takes <code>instance</code> and <code>api_key</code> arguments</li> <li>Updated deprecated <code>pkg_resources</code> to <code>importlib</code>.</li> </ul>"},{"location":"history/2_8_x/","title":"dj-stripe 2.8.2 (2023-09-06)","text":"<ul> <li>Automatically set the customer name in Stripe if available</li> <li>Fix error creating WebhookEndpoint in admin panel</li> <li>Pass down kwargs to <code>Invoice.pay()</code> (#1968)</li> <li>Fix crash with certain unsupported payment methods (#1944)</li> </ul>"},{"location":"history/2_8_x/#dj-stripe-281-2023-07-01","title":"dj-stripe 2.8.1 (2023-07-01)","text":"<p>This release removes a migration which caused a crash in certain cases.</p>"},{"location":"history/2_9_0/","title":"dj-stripe 2.9.0 ()","text":""},{"location":"history/2_9_0/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Transitions all custom webhook handler code to Django's native signals</li> </ul>"},{"location":"history/2_x/","title":"dj-stripe 2.0 ~ 2.3 release notes","text":""},{"location":"history/2_x/#230-2020-04-19","title":"2.3.0 (2020-04-19)","text":"<ul> <li>The minimum version of Django is now 2.1, and Python 3.6.</li> <li>Changed <code>JSONField</code> dependency back to     jsonfield from     jsonfield2 (see Warning     about safe uninstall of jsonfield2 on     upgrade).</li> <li>Fixed handling of <code>TaxRate</code> events (#1094).</li> <li>Fixed pagination issue in <code>Invoice.sync_from_stripe_data</code> (#1052).</li> <li>Fixed pagination issues in <code>Subscription</code> &amp; <code>Charge</code> <code>.sync_from_stripe_data</code> (#1054).</li> <li>Tidyup <code>_stripe_object_set_total_tax_amounts</code> unique handling (#1139).</li> <li>Dropped previously-deprecated <code>Invoice</code> fields (see https://stripe.com/docs/upgrades#2018-11-08 ):<ul> <li><code>.closed</code></li> <li><code>.forgiven</code></li> <li><code>.billing</code> (renamed to <code>.collection_method</code>)</li> </ul> </li> <li>Dropped previously-deprecated <code>enums.InvoiceStatus</code> (#1020).</li> <li>Deprecated the following fields - will be removed in 2.4 (#1087):<ul> <li><code>Subscription.billing</code> (use <code>.collection_method</code> instead)</li> <li><code>Subscription.start</code> (use <code>.start_date</code> instead)</li> <li><code>Subscription.tax_percent</code> (use <code>.default_tax_rates</code> instead)</li> </ul> </li> <li>Added <code>Invoice.status</code> and <code>enums.InvoiceStatus</code> (#1020).</li> <li>Added new <code>Invoice</code> fields (#1020, #1087):<ul> <li><code>.discount</code></li> <li><code>.default_source</code></li> <li><code>.status</code></li> </ul> </li> <li>Added new <code>Subscription</code> fields (#1087):<ul> <li><code>.default_payment_method</code></li> <li><code>.default_source</code></li> <li><code>.next_pending_invoice_item_invoice</code></li> <li><code>.pending_invoice_item_interval</code></li> <li><code>.pending_update</code></li> <li><code>.start_date</code></li> </ul> </li> </ul>"},{"location":"history/2_x/#warning-about-safe-uninstall-of-jsonfield2-on-upgrade","title":"Warning about safe uninstall of jsonfield2 on upgrade","text":"<p>Both jsonfield and jsonfield2 use the same import path, so if upgrading from dj-stripe\\~=2.2.0 in an existing virtualenv, be sure to uninstall jsonfield2 first. eg:</p> <pre><code>    # ensure jsonfield is uninstalled before we install jsonfield2\n    pip uninstall jsonfield2 -y &amp;&amp; pip install \"dj-stripe&gt;=2.3.0dev\"\n</code></pre> <p>Otherwise, <code>pip uninstall jsonfield2</code> will remove jsonfield's <code>jsonfield</code> module from <code>site-packages</code>, which would cause errors like <code>ImportError: cannot import name 'JSONField' from 'jsonfield' (unknown location)</code></p> <p>If you have hit this ImportError already after upgrading, running this should resolve it:</p> <pre><code># remove both jsonfield packages before reinstall to fix ImportError:\npip uninstall jsonfield jsonfield2 -y &amp;&amp; pip install \"dj-stripe&gt;=2.3.0\"\n</code></pre> <p>Note that this is only necessary if upgrading from dj-stripe 2.2.x, which temporarily depended on jsonfield2. This process is not necessary if upgrading from an earlier version of dj-stripe.</p>"},{"location":"history/2_x/#222-2020-01-20","title":"2.2.2 (2020-01-20)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed handling of <code>TaxRate</code> events (#1094).</li> </ul>"},{"location":"history/2_x/#221-2020-01-14","title":"2.2.1 (2020-01-14)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed bad package build.</li> </ul>"},{"location":"history/2_x/#220-2020-01-13","title":"2.2.0 (2020-01-13)","text":"<ul> <li>Changed <code>JSONField</code> dependency package from     jsonfield to     jsonfield2, for Django 3     compatibility (see Warning about safe uninstall of jsonfield on     upgrade).     Note that Django 2.1 requires jsonfield&lt;3.1.</li> <li>Added support for Django 3.0 (requires jsonfield2&gt;=3.0.3).</li> <li>Added support for python 3.8.</li> <li>Refactored <code>UpcomingInvoice</code>, so it's no longer a subclass of     <code>Invoice</code> (to allow <code>Invoice</code> to use <code>ManyToManyFields</code>).</li> <li>Dropped previously-deprecated <code>Account</code> fields (see https://stripe.com/docs/upgrades#2019-02-19 ):<ul> <li><code>.business_name</code></li> <li><code>.business_primary_color</code></li> <li><code>.business_url</code> (changed to a property)</li> <li><code>.debit_negative_balances</code></li> <li><code>.decline_charge_on</code></li> <li><code>.display_name</code></li> <li><code>.legal_entity</code></li> <li><code>.payout_schedule</code></li> <li><code>.payout_statement_descriptor</code></li> <li><code>.statement_descriptor</code></li> <li><code>.support_email</code></li> <li><code>.support_phone</code></li> <li><code>.support_url</code></li> <li><code>.timezone</code></li> <li><code>.verification</code></li> </ul> </li> <li>Dropped previously-deprecated <code>Account.business_logo</code> property     (renamed to <code>.branding_icon</code>)</li> <li>Dropped previously-deprecated <code>Customer.account_balance</code> property     (renamed to <code>.balance</code>)</li> <li>Dropped previously-deprecated properties <code>Invoice.application_fee</code>,     <code>Invoice.date</code></li> <li>Dropped previously-deprecated enum <code>PaymentMethodType</code> (use     <code>DjstripePaymentMethodType</code> instead)</li> <li>Renamed <code>Invoice.billing</code> to <code>.collection_method</code> (added deprecated     property for the old name).</li> <li>Updated <code>Invoice</code> model to add missing fields.</li> <li>Added <code>TaxRate</code> model, and <code>Invoice.default_tax_rates</code>,     <code>InvoiceItem.tax_rates</code>, <code>Invoice.total_tax_amounts</code>,     <code>Subscription.default_tax_rates</code>, <code>SubscriptionItem.tax_rates</code>     (#1027).</li> <li>Change urls.py to use the new style urls.</li> <li>Update forward relation fields in the admin to be raw id fields.</li> <li>Updated <code>StripeQuantumCurrencyAmountField</code> and     <code>StripeDecimalCurrencyAmountField</code> to support Stripe Large Charges     (#1045).</li> <li>Update event handling so <code>customer.subscription.deleted</code> updates     subscriptions to <code>status=\"canceled\"</code> instead of deleting it from our     database, to match Stripe's behaviour (#599).</li> <li>Added missing <code>Refund.reason</code> value, increases field width (#1075).</li> <li>Fixed <code>Refund.status</code> definition, reduces field width (#1076).</li> <li>Deprecated non-standard <code>Invoice.status</code> (renamed to     <code>Invoice.legacy_status</code>) to make way for the Stripe field     (preparation for #1020).</li> </ul>"},{"location":"history/2_x/#warning-about-safe-uninstall-of-jsonfield-on-upgrade","title":"Warning about safe uninstall of jsonfield on upgrade","text":"<p>Both jsonfield and jsonfield2 use the same import path, so if upgrading to dj-stripe&gt;=2.2 in an existing virtualenv, be sure to uninstall jsonfield first. eg:</p> <pre><code># ensure jsonfield is uninstalled before we install jsonfield2\npip uninstall jsonfield -y &amp;&amp; pip install \"dj-stripe&gt;=2.2.0\"\n</code></pre> <p>Otherwise, <code>pip uninstall jsonfield</code> will remove jsonfield2's <code>jsonfield</code> module from <code>site-packages</code>, which would cause errors like <code>ImportError: cannot import name 'JSONField' from 'jsonfield' (unknown location)</code></p> <p>If you have hit this ImportError already after upgrading, running this should resolve it:</p> <pre><code># remove both jsonfield packages before reinstall to fix ImportError:\npip uninstall jsonfield jsonfield2 -y &amp;&amp; pip install \"dj-stripe&gt;=2.2.0\"\n</code></pre>"},{"location":"history/2_x/#note-on-usage-of-stripe-elements-js","title":"Note on usage of Stripe Elements JS","text":"<p>See Integrating Stripe Elements for notes about usage of the Stripe Elements frontend JS library.</p> <p>In summary: If you haven't yet migrated to PaymentIntents, prefer <code>stripe.createSource()</code> to <code>stripe.createToken()</code>.</p>"},{"location":"history/2_x/#211-2019-10-01","title":"2.1.1 (2019-10-01)","text":"<p>This is a bugfix-only release:</p> <ul> <li>Updated webhook signals list (#1000).</li> <li>Fixed issue syncing PaymentIntent with destination charge (#960).</li> <li>Fixed <code>Customer.subscription</code> and <code>.valid_subscriptions()</code> to ignore     <code>status=incomplete_expired</code> (#1006).</li> <li>Fixed error on <code>paymentmethod.detached</code> event with <code>card_xxx</code>     payment methods (#967).</li> <li>Added <code>PaymentMethod.detach()</code> (#943).</li> <li>Updated <code>help_text</code> on all currency fields to make it clear if     they're holding integer cents (<code>StripeQuantumCurrencyAmountField</code>)     or decimal dollar (or euro, pound etc)     (<code>StripeDecimalCurrencyAmountField</code>) (#999)</li> <li>Documented our preferred Django model field types (#986)</li> </ul>"},{"location":"history/2_x/#upcoming-migration-of-currency-fields-storage-as-cents-instead-of-dollars","title":"Upcoming migration of currency fields (storage as cents instead of dollars)","text":"<p>Please be aware that we're looking at standardising our currency storage fields as integer quanta (cents) instead of Decimal (dollar) values, to match stripe.</p> <p>This is intended to be part of the 3.0 release, since it will involve some breaking changes. See #955 for details and discussion.</p>"},{"location":"history/2_x/#210-2019-09-12","title":"2.1.0 (2019-09-12)","text":"<ul> <li>Dropped Django 2.0 support</li> <li>The Python stripe library minimum version is now <code>2.32.0</code>, also     <code>2.36.0</code> is excluded due to a regression (#991).</li> <li>Dropped previously-deprecated <code>Charge.fee_details</code> property.</li> <li>Dropped previously-deprecated <code>Transfer.fee_details</code> property.</li> <li>Dropped previously-deprecated <code>field_name</code> parameter to     <code>sync_from_stripe_data</code></li> <li>Dropped previously-deprecated alias <code>StripeObject</code> of <code>StripeModel</code></li> <li>Dropped previously-deprecated alias <code>PaymentMethod</code> of <code>DjstripePaymentMethod</code></li> <li>Dropped previously-deprecated properties <code>Charge.source_type</code> and     <code>Charge.source_stripe_id</code></li> <li><code>enums.PaymentMethodType</code> has been deprecated, use <code>enums.DjstripePaymentMethodType</code></li> <li>Made <code>SubscriptionItem.quantity</code> nullable as per Plans with     <code>usage_type=\"metered\"</code> (follow-up to #865)</li> <li>Added manage commands <code>djstripe_sync_models</code> and     <code>djstripe_process_events</code> (#727, #89)</li> <li>Fixed issue with re-creating a customer after <code>Customer.purge()</code> (#916)</li> <li>Fixed sync of Customer Bank Accounts (#829)</li> <li>Fixed <code>Subscription.is_status_temporarily_current()</code> (#852)</li> <li>New models<ul> <li>Payment Intent</li> <li>Setup Intent</li> <li>Payment Method</li> <li>Session</li> </ul> </li> <li>Added fields to <code>Customer</code> model: <code>address</code>, <code>invoice_prefix</code>,     <code>invoice_settings</code>, <code>phone</code>, <code>preferred_locales</code>, <code>tax_exempt</code></li> </ul> <p>Changes from API 2018-11-08:</p> <ul> <li>Added <code>Invoice.auto_advance</code>, deprecated <code>Invoice.closed</code> and     <code>Invoice.forgiven</code>, see     https://stripe.com/docs/billing/migration/invoice-states#upgrade-checklist</li> </ul> <p>Changes from API 2019-02-19:</p> <ul> <li> <p>Major changes to Account fields, see     https://stripe.com/docs/upgrades#2019-02-19 , updated Account     fields to match API 2019-02-19:</p> </li> <li> <p>Added <code>Account.business_profile</code>, <code>.business_type</code>, <code>.company</code>,     <code>.individual</code>, <code>.requirements</code>, <code>.settings</code></p> </li> <li>Deprecated the existing fields, to be removed in 2.2</li> <li>Special handling of the icon and logo fields:     &gt; -   Renamed <code>Account.business_logo</code> to <code>Account.branding_icon</code>     &gt;     (note that in Stripe's API <code>Account.business_logo</code> was renamed     &gt;     to <code>Account.settings.branding_icon</code>, and     &gt;     <code>Account.business_logo_large</code> (which we didn't have a field     &gt;     for) was renamed to <code>Account.settings.branding_logo</code>)     &gt; -   Added deprecated property for <code>Account.business_logo</code>     &gt; -   Added <code>Account.branding_logo</code> as a ForeignKey     &gt; -   Populate <code>Account.branding_icon</code> and <code>.branding_logo</code> from the     &gt;     new <code>Account.settings.branding.icon</code> and <code>.logo</code></li> </ul> <p>Changes from API 2019-03-14:</p> <ul> <li>Renamed <code>Invoice.application_fee</code> to     <code>Invoice.application_fee_amount</code> (added deprecated property for the     old name)</li> <li>Removed <code>Invoice.date</code>, in place of <code>Invoice.created</code> (added     deprecated property for the old name)</li> <li>Added <code>Invoice.status_transitions</code></li> <li>Renamed <code>Customer.account_balance</code> to <code>Customer.balance</code> (added     deprecated property for the old name)</li> <li>Renamed <code>Customer.payment_methods</code> to     <code>Customer.customer_payment_methods</code></li> <li>Added new <code>SubscriptionStatus.incomplete</code> and     <code>SubscriptionStatus.incomplete_expired</code> statuses (#974)</li> <li>Added new <code>BalanceTransactionType</code> values (#983)</li> </ul>"},{"location":"history/2_x/#squashed-dev-migrations","title":"Squashed dev migrations","text":"<p>As per our migration policy, unreleased migrations on the master branch have been squashed.</p> <p>If you have been using the 2.1.0dev branch from master, you'll need to run the squashed migrations migrations before upgrading to &gt;=2.1.0.</p> <p>The simplest way to do this is to <code>pip install dj-stripe==2.1.0rc0</code> and migrate, alternatively check out the <code>2.1.0rc0</code> git tag.</p>"},{"location":"history/2_x/#205-2019-09-12","title":"2.0.5 (2019-09-12)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Avoid stripe==2.36.0 due to regression (#991)</li> </ul>"},{"location":"history/2_x/#204-2019-09-09","title":"2.0.4 (2019-09-09)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed irreversible migration (#909)</li> </ul>"},{"location":"history/2_x/#203-2019-06-11","title":"2.0.3 (2019-06-11)","text":"<p>This is a bugfix-only version:</p> <ul> <li>In <code>_get_or_create_from_stripe_object</code>, wrap create <code>_create_from_stripe_object</code> in     transaction, fixes <code>TransactionManagementError</code> on race condition in webhook     processing (#877, #903).</li> </ul>"},{"location":"history/2_x/#202-2019-06-09","title":"2.0.2 (2019-06-09)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Don't save event objects if the webhook processing fails (#832).</li> <li>Fixed IntegrityError when <code>REMOTE_ADDR</code> is an empty string.</li> <li>Deprecated <code>field_name</code> parameter to <code>sync_from_stripe_data</code></li> </ul>"},{"location":"history/2_x/#201-2019-04-29","title":"2.0.1 (2019-04-29)","text":"<p>This is a bugfix-only version:</p> <ul> <li>Fixed an error on <code>invoiceitem.updated</code> (#848).</li> <li>Handle test webhook properly in recent versions of Stripe API     (#779). At some point 2018 Stripe silently changed the ID used for     test events and <code>evt_00000000000000</code> is not used anymore.</li> <li>Fixed OperationalError seen in migration 0003 on postgres (#850).</li> <li>Fixed issue with migration 0003 not being unapplied correctly (#882).</li> <li>Fixed missing <code>SubscriptionItem.quantity</code> on metered Plans (#865).</li> <li>Fixed <code>Plan.create()</code> (#870).</li> </ul>"},{"location":"history/2_x/#200-2019-03-01","title":"2.0.0 (2019-03-01)","text":"<ul> <li>The Python stripe library minimum version is now <code>2.3.0</code>.</li> <li><code>PaymentMethod</code> has been renamed to <code>DjstripePaymentMethod</code> (#841). An alias remains     but will be removed in the next version.</li> <li>Dropped support for Django&lt;2.0, Python&lt;3.4.</li> <li>Dropped previously-deprecated <code>stripe_objects</code> module.</li> <li>Dropped previously-deprecated <code>stripe_timestamp</code> field.</li> <li>Dropped previously-deprecated <code>Charge.receipt_number</code> field.</li> <li>Dropped previously-deprecated <code>StripeSource</code> alias for <code>Card</code></li> <li>Dropped previously-deprecated <code>SubscriptionView</code>, <code>CancelSubscriptionView</code> and     <code>CancelSubscriptionForm</code>.</li> <li>Removed the default value from <code>DJSTRIPE_SUBSCRIPTION_REDIRECT</code>.</li> <li>All <code>stripe_id</code> fields have been renamed <code>id</code>.</li> <li><code>Charge.source_type</code> has been deprecated. Use <code>Charge.source.type</code>.</li> <li><code>Charge.source_stripe_id</code> has been deprecated. Use <code>Charge.source.id</code>.</li> <li>All deprecated Transfer fields (Stripe API 2017-04-06 and older), have been dropped.     This includes <code>date</code>, <code>destination_type</code> (<code>type</code>), <code>failure_code</code>,     <code>failure_message</code>, <code>statement_descriptor</code> and <code>status</code>.</li> <li>Fixed IntegrityError when <code>REMOTE_ADDR</code> is missing (#640).</li> <li>New models:<ul> <li><code>ApplicationFee</code></li> <li><code>ApplicationFeeRefund</code></li> <li><code>BalanceTransaction</code></li> <li><code>CountrySpec</code></li> <li><code>ScheduledQuery</code></li> <li><code>SubscriptionItem</code></li> <li><code>TransferReversal</code></li> <li><code>UsageRecord</code></li> </ul> </li> <li>The <code>fee</code> and <code>fee_details</code> attributes of both the <code>Charge</code> and <code>Transfer</code> objects     are no longer stored in the database. Instead, they access their respective new     <code>balance_transaction</code> foreign key. Note that <code>fee_details</code> has been deprecated on     both models.</li> <li>The <code>fraudulent</code> attribute on <code>Charge</code> is now a property that checks the     <code>fraud_details</code> field.</li> <li>Object key validity is now always enforced (#503).</li> <li><code>Customer.sources</code> no longer refers to a Card queryset, but to a Source queryset. In     order to correctly transition, you should change all your references to     <code>customer.sources</code> to <code>customer.legacy_cards</code> instead. The <code>legacy_cards</code> attribute     already exists in 1.2.0.</li> <li><code>Customer.sources_v3</code> is now named <code>Customer.sources</code>.</li> <li>A new property <code>Customer.payment_methods</code> is now available, which allows you to     iterate over all of a customer's payment methods (sources then cards).</li> <li><code>Card.customer</code> is now nullable and cards are no longer deleted when their     corresponding customer is deleted (#654).</li> <li>Webhook signature verification is now available and is preferred. Set the     <code>DJSTRIPE_WEBHOOK_SECRET</code> setting to your secret to start using it.</li> <li><code>StripeObject</code> has been renamed <code>StripeModel</code>. An alias remains but will be removed     in the next version.</li> <li>The metadata key used in the <code>Customer</code> object can now be configured by changing the     <code>DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY</code> setting. Setting this to None or an empty string     now also disables the behaviour altogether.</li> <li>Text-type fields in dj-stripe will no longer ever be None. Instead, any falsy text     field will return an empty string.</li> <li>Switched test runner to pytest-django</li> <li><code>StripeModel.sync_from_stripe_data()</code> will now automatically retrieve related     objects and populate foreign keys (#681)</li> <li>Added <code>Coupon.name</code></li> <li>Added <code>Transfer.balance_transaction</code></li> <li>Exceptions in webhooks are now re-raised as well as saved in the database (#833)</li> </ul>"},{"location":"history/3_0_0/","title":"dj-stripe 3.0.0 (20XX-XX-XX)","text":"<p>Attention</p> <p>3.0.0 is a significantly backwards-incompatible release. Migrating a 2.x database is unsupported due to significant changes to the data models.</p>"},{"location":"history/3_0_0/#release-highlights","title":"Release highlights","text":"<ul> <li>A new field <code>stripe_data</code> json field has been added to all     supported models. This field contains a copy of the entire object as-is in the Stripe     API.</li> </ul>"},{"location":"history/3_0_0/#breaking-changes","title":"Breaking changes","text":"<p>Attention</p> <p>Many superfluous model fields have been removed, in favour of using <code>stripe_data</code>. We retain model fields for useful foreign keys and other frequently-used fields.</p> <ul> <li>Migrations have been reset.</li> <li>Removed deprecated <code>DJSTRIPE_WEBHOOK_TOLERANCE</code> setting.</li> <li>Removed deprecated <code>DJSTRIPE_WEBHOOK_SECRET</code> setting.</li> <li>Removed deprecated <code>DJSTRIPE_WEBHOOK_VALIDATION</code> setting.</li> <li>Removed deprecated <code>DJSTRIPE_WEBHOOK_URL</code> setting.</li> <li>Removed legacy <code>Customer.add_card()</code> method. Use <code>Custoner.add_payment_method()</code> instead.</li> <li>Most of the models visible in the Django Admin are now read-only. (Note: This does     not change anything functionally, as editing models was not replicated upstream.)</li> <li><code>DJSTRIPE_FOREIGN_KEY_TO_FIELD</code> setting has been removed, which drops support for     legacy <code>djstripe_id</code> foreign keys.</li> <li>Support for webhook endpoints without <code>UUID</code> has been dropped</li> </ul>"},{"location":"history/3_0_0/#other-changes","title":"Other changes","text":"<ul> <li>Dropped <code>unique_together</code> constraint on the <code>Customer</code> model. This was done because given the same <code>livemode</code> and <code>djstripe_owner_account</code>, a <code>subscriber</code> can be associated with multiple customers and that is Stripe's default behavior.</li> <li>Added missing model fields to Checkout Sessions.</li> <li><code>LineItem</code> instances can also get synced using the <code>djstripe_sync_models</code> management command.</li> <li>Updated <code>check_stripe_api_key</code> django system check to not be a blocker for new dj-stripe users by raising Info warnings on the console. If the Stripe keys were not defined in the settings file, the <code>Critical</code> warning was preventing users to add them directly from the admin as mentioned in the docs. This was creating a chicken-egg situation where one could only add keys in the admin before they were defined in settings.</li> <li>Added <code>paused</code> as a valid status to the SubscriptionStatus enum</li> </ul>"},{"location":"project/authors/","title":"Credits","text":""},{"location":"project/authors/#core-contributors","title":"Core contributors","text":"<ul> <li>Alexander Kavanaugh (Co-maintainer)</li> <li>Jerome Leclanche (Co-maintainer)</li> <li>Arnav Choudhury</li> </ul>"},{"location":"project/authors/#former-core-contributors","title":"Former core contributors","text":"<ul> <li>John Carter</li> <li>Pablo Castellano</li> <li>Daniel Greenfeld</li> <li>Lee Skillen</li> </ul>"},{"location":"project/authors/#contributors","title":"Contributors","text":"<p>dj-stripe is brought to you by many more open source contributors.</p> <p>See the complete list on Github.</p>"},{"location":"project/contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"project/contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"project/contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/dj-stripe/dj-stripe/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>The version of python and Django you're running</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"project/contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.</p>"},{"location":"project/contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it.</p>"},{"location":"project/contributing/#write-documentation","title":"Write Documentation","text":"<p>dj-stripe could always use more documentation, whether as part of the official dj-stripe docs, in docstrings, or even on the web in blog posts, articles, and such.</p> <p>To see the project's documentation live, run the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>The documentation site will then be served on http://127.0.0.1:8000.</p> <p>In case of any installation error</p> <p>In case you get the error that some plugin is not installed, please run:     <pre><code>poetry install --with docs\n</code></pre></p> <p>If you wish to just generate the documentation, you can replace <code>serve</code> with <code>build</code>, and the docs will be generated into the <code>site/</code> folder.</p>"},{"location":"project/contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/dj-stripe/dj-stripe/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome     :)</li> </ul>"},{"location":"project/contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up local development.</p> <ol> <li> <p>Fork dj-stripe on Github.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/dj-stripe.git\n</code></pre> </li> <li> <p>Set up pre-commit:</p> <pre><code>$ git init # A git repo is required to install pre-commit\n$ pre-commit install\n</code></pre> </li> <li> <p>Set up your test database. If you're running tests using PostgreSQL:</p> <pre><code>$ createdb djstripe\n</code></pre> <p>or if you want to test vs sqlite (for convenience) or MySQL, they can be selected by setting this environment variable:</p> <pre><code>$ export DJSTRIPE_TEST_DB_VENDOR=sqlite\n# or: export DJSTRIPE_TEST_DB_VENDOR=mysql\n</code></pre> <p>For postgres and mysql, the database host,port,username and password can be set with environment variables, see <code>tests/settings.py</code></p> </li> <li> <p>Install Poetry if you do not have it already.</p> <p>You can set up a virtual environment with:</p> <pre><code>$ poetry install\n</code></pre> <p>You can then, at any time, open a shell into that environment with:</p> <pre><code>$ poetry shell\n</code></pre> </li> <li> <p>When you're done making changes, check that your changes pass the tests. A quick     test run can be done as follows:</p> <pre><code>$ DJSTRIPE_TEST_DB_VENDOR=sqlite poetry run pytest --reuse-db\n</code></pre> <p>You should also check that the tests pass with other python and Django versions with tox. pytest will output both command line and html coverage statistics and will warn you if your changes caused code coverage to drop.:</p> <pre><code>$ pip install tox\n$ tox\n</code></pre> </li> <li> <p>If your changes altered the models you may need to generate Django migrations:</p> <pre><code>$ DJSTRIPE_TEST_DB_VENDOR=sqlite poetry run ./manage.py makemigrations\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol> <p>Congratulations, you're now a dj-stripe contributor! Have some \u2665 from us.</p>"},{"location":"project/contributing/#preferred-django-model-field-types","title":"Preferred Django Model Field Types","text":"<p>When mapping from Stripe API field types to Django model fields, we try to follow Django best practises where practical.</p> <p>The following types should be preferred for fields that map to the Stripe API (which is almost all fields in our models).</p>"},{"location":"project/contributing/#strings","title":"Strings","text":"<ul> <li>Stripe API string fields have a default maximum length of 5,000     characters.</li> <li>In some cases a maximum length (<code>maxLength</code>) is specified in the Stripe OpenAPI     schema.</li> <li>We follow Django's     recommendation and     avoid using null on string fields (which means we store <code>\"\"</code> for string fields that     are <code>null</code> in stripe). Note that is enforced in the sync logic in     StripeModel._stripe_object_to_record.</li> <li>For long string fields (eg above 255 characters) we prefer <code>TextField</code> over     <code>Charfield</code>.</li> </ul> <p>Therefore the default type for string fields that don't have a maxLength specified in the Stripe OpenAPI schema should usually be:</p> <pre><code>str_field = TextField(max_length=5000, default=\", blank=True, help_text=\"...\")\n</code></pre>"},{"location":"project/contributing/#enumerations","title":"Enumerations","text":"<p>Fields that have a defined set of values can be implemented using <code>StripeEnumField</code>.</p>"},{"location":"project/contributing/#hash-dictionaries","title":"Hash (dictionaries)","text":"<p>Use the <code>JSONField</code> in <code>djstripe.fields</code>.</p>"},{"location":"project/contributing/#currency-amounts","title":"Currency amounts","text":"<p>Stripe handles all currency amounts as integer cents, we currently have a mixture of fields as integer cents and decimal (eg dollar, euro etc) values, but we are aiming to standardise on cents (see https://github.com/dj-stripe/dj-stripe/issues/955).</p> <p>All new currency amount fields should use <code>StripeQuantumCurrencyAmountField</code>.</p>"},{"location":"project/contributing/#dates-and-datetimes","title":"Dates and Datetimes","text":"<p>The Stripe API uses an integer timestamp (seconds since the Unix epoch) for dates and datetimes. We store this as a datetime field, using <code>StripeDateTimeField</code>.</p>"},{"location":"project/contributing/#django-migration-policy","title":"Django Migration Policy","text":"<p>Migrations are considered a breaking change, so it's not usually not acceptable to add a migration to a stable branch, it will be a new <code>MAJOR.MINOR.0</code> release.</p> <p>A workaround to this in the case that the Stripe API data isn't compatible with out model (eg Stripe is sending <code>null</code> to a non-null field) is to implement the <code>_manipulate_stripe_object_hook</code> classmethod on the model.</p>"},{"location":"project/contributing/#avoid-new-migrations-with-non-schema-changes","title":"Avoid new migrations with non-schema changes","text":"<p>If a code change produces a migration that doesn't alter the database schema (eg changing <code>help_text</code>) then instead of adding a new migration you can edit the most recent migration that affects the field in question.</p> <p>e.g.: https://github.com/dj-stripe/dj-stripe/commit/e2762c38918a90f00c42ecf21187a920bd3a2087</p>"},{"location":"project/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>The pull request must not drop code coverage below the current level.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new     functionality into a function with a docstring.</li> <li>If the pull request makes changes to a model, include Django migrations.</li> <li>The pull request should work for Python 3.6+. Check Github     Actions and make sure that the     tests pass for all supported Python versions.</li> <li>Code formatting: Make sure to install <code>pre-commit</code> to automatically run it on <code>staged files</code> or run manually with <code>pre-commit run --all-files</code> at the dj-stripe root to keep a consistent style.</li> </ol>"},{"location":"project/release_process/","title":"Release Process","text":"<p>Note</p> <p>Before <code>MAJOR</code> or <code>MINOR</code> releases:</p> <ul> <li>Review deprecation notes (eg search for \"deprecated\") and remove     deprecated features as appropriate</li> <li>Squash migrations (ONLY on unreleased migrations) - see below</li> </ul>"},{"location":"project/release_process/#squash-migrations","title":"Squash migrations","text":"<p>If there's more than one unreleased migration on master consider squashing them with <code>squashmigrations</code>, immediately before tagging the new release:</p> <ul> <li> <p>Create a new squashed migration with <code>./manage.py squashmigrations</code>     (only squash migrations that have never been in a tagged release)</p> </li> <li> <p>Commit the squashed migration on master with a commit message like     \"Squash x.y.0dev migrations\" (this will allow users who running     master to safely upgrade, see note below about rc package)</p> </li> <li> <p>Then transition the squashed migration to a normal migration as per Django:</p> <ul> <li>Delete all the migration files it replaces</li> <li>Update all migrations that depend on the deleted migrations to     depend on the squashed migration instead</li> <li>Remove the <code>replaces</code> attribute in the Migration class of the     squashed migration (this is how Django tells that it is a     squashed migration)</li> </ul> </li> <li> <p>Commit these changes to master with a message like \"Transition     squashed migration to normal migration\"</p> </li> <li> <p>Then do the normal release process - bump version as another commit     and tag the release</p> </li> </ul> <p>See https://docs.djangoproject.com/en/dev/topics/migrations/#migration-squashing</p>"},{"location":"project/release_process/#tag-package-squashed-migrations-as-rc-package-optional","title":"Tag + package squashed migrations as rc package (optional)","text":"<p>As a convenience to users who are running master, an rc version can be created to package the squashed migration.</p> <p>To do this, immediately after the \"Squash x.y.0dev migrations\" commit, follow the steps below but with a x.y.0rc0 version to tag and package a rc version.</p> <p>Users who have been using the x.y.0dev code from master can then run the squashed migrations migrations before upgrading to &gt;=x.y.0.</p> <p>The simplest way to do this is to <code>pip install dj-stripe==x.y.0rc0</code> and migrate, or alternatively check out the <code>x.y.0rc0</code> git tag and migrate.</p>"},{"location":"project/release_process/#prepare-changes-for-the-release-commit","title":"Prepare changes for the release commit","text":"<ul> <li> <p>Choose your version number (using https://semver.org/ )</p> <ul> <li>if there's a new migration, it should be a <code>MAJOR.0.0</code> or     <code>MAJOR.MINOR.0</code> version.</li> </ul> </li> <li> <p>Review and update <code>HISTORY.md</code></p> <ul> <li>Add a section for this release version</li> <li>Set date on this release version</li> <li>Check that summary of feature/fixes is since the last release is     up to date</li> </ul> </li> <li> <p>Update package version number in <code>setup.cfg</code></p> </li> <li> <p>Review and update supported API version in <code>README.md</code>     (this is the most recent Stripe account version tested against, not     <code>DEFAULT_STRIPE_API_VERSION</code>)</p> </li> <li> <p><code>git add</code> to stage these changes</p> </li> </ul>"},{"location":"project/release_process/#create-signed-release-commit-tag","title":"Create signed release commit tag","text":"<p>Note</p> <p>Before doing this you should have a GPG key set up on github</p> <p>If you don't have a GPG key already, one method is via https://keybase.io/ , and then add it to your github profile.</p> <ul> <li>Create a release tag with the above staged changes (where <code>$VERSION</code>     is the version number to be released:<pre><code>$ git commit -m \"Release $VERSION\"\n$ git tag -fsm \"Release $VERSION\" $VERSION\n</code></pre> </li> </ul> <p>This can be expressed as a bash function as follows:</p> <pre><code>git_release() { git commit -m \"Release $1\" &amp;&amp; git tag -fsm \"Release $1\" $1; }\n</code></pre> <ul> <li>Push the commit and tag:<pre><code>$ git push --follow-tags\n</code></pre> </li> </ul>"},{"location":"project/release_process/#updatecreate-stable-branch","title":"Update/create stable branch","text":"<p>Push these changes to the appropriate <code>stable/MAJOR.MINOR</code> version branch (eg <code>stable/2.0</code>) if they're not already - note that this will trigger the readthedocs build</p>"},{"location":"project/release_process/#release-on-pypi","title":"Release on pypi","text":"<p>See https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives</p>"},{"location":"project/sponsors/","title":"Sponsors","text":""},{"location":"project/sponsors/#gold-sponsors","title":"Gold Sponsors","text":"<p>This project is sponsored by none other than Stripe, since August 2020.</p> <p>We're thankful for their contribution, which has allowed us to greatly improve the project, increase QA and testing, and push forward with the dj-stripe 2.4.0 release.</p>"},{"location":"project/sponsors/#silver-sponsors","title":"Silver Sponsors","text":"<p>We do not currently have any Silver sponsors.</p> <p>Want to be the first?</p>"},{"location":"project/support/","title":"Support","text":""},{"location":"project/support/#support-plans","title":"Support plans","text":"<p>dj-stripe offers paid support plans via Github Sponsors:</p> <p>https://github.com/sponsors/dj-stripe</p> <p>All issues and feature requests raised by corporate sponsors will be prioritized. Gold Sponsors also get a dedicated developer point of contact, to help with any questions, issues, or general inquiries relating to dj-stripe.</p>"},{"location":"project/support/#bug-reports-and-feature-requests","title":"Bug reports and feature requests","text":"<p>Please report any issues you come across on the Github issue tracker.</p> <p>Do not hesitate to leave feedback and suggestions there as well. You may also ask usage questions on the issue tracker.</p>"},{"location":"project/test_fixtures/","title":"Test Fixtures","text":"<p>dj-stripe's unit tests rely on fixtures to represent Stripe API and webhook data.</p>"},{"location":"project/test_fixtures/#rationale","title":"Rationale","text":"<p>These fixtures are partly hand-coded and partly generated by creating objects in Stripe and then retrieved via the API.</p> <p>Each approach has pros and cons:</p> <p>Hand-coding the fixtures allows them to be crafted specifically for a test case. They can also be terse, and nested objects can be done by reference to avoid duplication. But maintaining or upgrading them is a painstaking manual process.</p> <p>Generating the fixtures via Stripe gives the big advantage that Stripe schema changes are automatically represented in the fixtures, which should allow us to upgrade dj-stripe's schema to match Stripe much more easily. This would be done by updating dj-stripe's targeted API version (<code>DEFAULT_STRIPE_API_VERSION</code>), regenerating the fixtures, and updating the model to match the fixture changes. The down side is it's tricky to regenerate fixture files without introducing big changes (eg to object ids) - the script does this by mapping a dummy id to various objects.</p>"},{"location":"project/test_fixtures/#regenerating-the-test-fixtures","title":"Regenerating the test fixtures","text":"<p>To regenerate the test fixtures (e.g. to populate the fixtures with new API fields from Stripe), do the following:</p> <ol> <li> <p>(one time only) Create a new Stripe account called \"dj-stripe     scratch\", with country set to United States. (we use US so the     currency matches the existing fixtures matches, in the future it     would be good to test for other countries).</p> </li> <li> <p>If you already had this account ready and want to start again from     scratch, you can delete all of the test data via the button in     Settings &gt; Data https://dashboard.stripe.com/account/data</p> </li> <li> <p>Activate a virtualenv with the dj-stripe project (see Getting     Started)</p> </li> <li> <p>Set the dj-stripe secret key environment variable to the secret key     for this account (<code>export STRIPE_SECRET_KEY=sk_test_...</code>)</p> </li> <li> <p>Run the manage command to create the test objects in your stripe     account if they don't already exist, and regenerate the local     fixture files from them:</p> <pre><code>$ ./manage.py regenerate_test_fixtures\n</code></pre> </li> </ol> <p>The command tries to avoid inconsequential changes to the fixtures (e.g the <code>created</code> timestamp) by restoring a whitelist of values from the existing fixtures.</p> <p>This functionality can be disabled by passing <code>--update-sideeffect-fields</code>.</p>"},{"location":"reference/enums/","title":"Enumerations","text":"<p>::: djstripe.enums</p>"},{"location":"reference/managers/","title":"Managers","text":"<p>::: djstripe.managers</p>"},{"location":"reference/models/","title":"Models","text":"<p>Models hold the bulk of the functionality included in the dj-stripe package. Each model is tied closely to its corresponding object in the stripe dashboard. Fields that are not implemented for each model have a short reason behind the decision in the docstring for each model.</p>"},{"location":"reference/models/#core-resources","title":"Core Resources","text":"<p>::: djstripe.models.core</p>"},{"location":"reference/models/#payment-methods","title":"Payment Methods","text":"<p>::: djstripe.models.payment_methods     selection:         filters: [\"!LegacySourceMixin$\", \"!DjstripePaymentMethod$\"]</p>"},{"location":"reference/models/#billing","title":"Billing","text":"<p>::: djstripe.models.billing     selection:         filters: [\"!DjstripeInvoiceTotalTaxAmount$\", \"!DjstripeUpcomingInvoiceTotalTaxAmount$\",         \"!BaseInvoice$\"]</p>"},{"location":"reference/models/#connect","title":"Connect","text":"<p>::: djstripe.models.account</p> <p>::: djstripe.models.connect</p>"},{"location":"reference/models/#fraud","title":"Fraud","text":"<p>::: djstripe.models.fraud</p>"},{"location":"reference/models/#orders","title":"Orders","text":"<p>::: djstripe.models.orders</p>"},{"location":"reference/models/#sigma","title":"Sigma","text":"<p>::: djstripe.models.sigma</p>"},{"location":"reference/models/#webhooks","title":"Webhooks","text":"<p>::: djstripe.models.webhooks</p>"},{"location":"reference/project/","title":"Project","text":"<p>::: djstripe ::: tests</p>"},{"location":"reference/settings/","title":"Settings","text":""},{"location":"reference/settings/#stripe_api_version-2020-08-27","title":"STRIPE_API_VERSION (='2020-08-27')","text":"<p>The API version used to communicate with the Stripe API is configurable, and defaults to the latest version that has been tested as working. Using a value other than the default is allowed, as a string in the format of YYYY-MM-DD.</p> <p>For example, you can specify <code>\"2020-03-02\"</code> to use that API version:</p> <pre><code>STRIPE_API_VERSION = \"2020-03-02\"\n</code></pre> <p>However you do so at your own risk, as using a value other than the default might result in incompatibilities between Stripe and this library, especially if Stripe has labelled the differences between API versions as \"Major\". Even small differences such as a new enumeration value might cause issues.</p> <p>For this reason it is best to assume that only the default version is supported.</p> <p>For more information on API versioning, see the stripe documentation.</p> <p>See also API Versions.</p>"},{"location":"reference/settings/#djstripe_idempotency_key_callback-djstripesettingsdjstripe_settings_get_idempotency_key","title":"DJSTRIPE_IDEMPOTENCY_KEY_CALLBACK (=djstripe.settings.djstripe_settings._get_idempotency_key)","text":"<p>A function which will return an idempotency key for a particular object_type and action pair. By default, this is set to a function which will create a <code>djstripe.IdempotencyKey</code> object and return its <code>uuid</code>. You may want to customize this if you want to give your idempotency keys a different lifecycle than they normally would get.</p> <p>The function takes the following signature:</p> <pre><code>def get_idempotency_key(object_type: str, action: str, livemode: bool):\n    return \"&lt;idempotency key&gt;\"\n</code></pre> <p>The function MUST return a string suitably random for the object_type/action pair, and usable in the Stripe <code>Idempotency-Key</code> HTTP header. For more information, see the stripe documentation.</p>"},{"location":"reference/settings/#djstripe_subscriber_customer_key-djstripe_subscriber","title":"DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY (=\"djstripe_subscriber\")","text":"<p>Every Customer object created in Stripe is tagged with metadata This setting controls what the name of the key in Stripe should be. The key name must be a string no more than 40 characters long.</p> <p>You may set this to <code>None</code> or <code>\"\"</code> to disable that behaviour altogether. This is probably not something you want to do, though.</p>"},{"location":"reference/settings/#djstripe_subscriber_model-settingsauth_user_model","title":"DJSTRIPE_SUBSCRIBER_MODEL (=settings.AUTH_USER_MODEL)","text":"<p>If the AUTH_USER_MODEL doesn't represent the object your application's subscription holder, you may define a subscriber model to use here. It should be a string in the form of 'app.model'.</p> <p>Note</p> <p>DJSTRIPE_SUBSCRIBER_MODEL must have an <code>email</code> field. If your existing model has no email field, add an email property that defines an email address to use.</p> <p>Example Model:</p> <pre><code>class Organization(models.Model):\n    name = CharField(max_length=200, unique=True)\n    admin = ForeignKey(settings.AUTH_USER_MODEL, on_delete=CASCADE)\n\n    @property\n    def email(self):\n        return self.admin.email\n</code></pre>"},{"location":"reference/settings/#djstripe_subscriber_model_migration_dependency-__first__","title":"DJSTRIPE_SUBSCRIBER_MODEL_MIGRATION_DEPENDENCY (=\"__first__\")","text":"<p>If the model referenced in DJSTRIPE_SUBSCRIBER_MODEL is not created in the <code>__first__</code> migration of an app you can specify the migration name to depend on here. For example: \"0003_here_the_subscriber_model_was_added\"</p>"},{"location":"reference/settings/#djstripe_webhook_event_callback-none","title":"DJSTRIPE_WEBHOOK_EVENT_CALLBACK (=None)","text":"<p>Webhook event callbacks allow an application to take control of what happens when an event from Stripe is received. It must be a callable or importable string to a callable that takes an event object.</p> <p>One suggestion is to put the event onto a task queue (such as celery) for asynchronous processing.</p> <p>Examples:</p> <pre><code># callbacks.py\ndef webhook_event_callback(event, api_key):\n    \"\"\" Dispatches the event to celery for processing. \"\"\"\n    from . import tasks\n    # Ansychronous hand-off to celery so that we can continue immediately\n    tasks.process_webhook_event.s(event.pk, api_key).apply_async()\n</code></pre> <pre><code># tasks.py\nfrom djstripe.models import WebhookEventTrigger\nfrom stripe import StripeError\n\n@shared_task(bind=True)\ndef process_webhook_event(self, pk, api_key):\n    \"\"\" Processes events from Stripe asynchronously. \"\"\"\n    logger.info(f\"Processing Stripe event: {pk}\")\n    try:\n        # get the event\n        obj = WebhookEventTrigger.objects.get(pk=pk)\n        # process the event.\n        # internally, this creates a Stripe WebhookEvent Object and invokes the respective Webhooks\n        try:\n            event = obj.process(save=False, api_key=api_key)\n            # only save the event if webhook process was successfuly, otherwise it won't retry\n            event.save()\n        except StripeError as exc:\n            # Mark the event as not processed\n            obj.processed = False\n            obj.save()\n            logger.error(f\"Failed to process Stripe event: {pk}. Retrying in 60 seconds.\")\n            raise self.retry(exc=exc, countdown=60)  # retry after 60 seconds\n    except WebhookEventTrigger.DoesNotExist as exc:\n        # This can happen in case the celery task got executed before the actual model got saved to the DB\n        raise self.retry(exc=exc, countdown=10)  # retry after 10 seconds\n\n    return event.type or \"Stripe Event Processed\"\n</code></pre> <pre><code># settings.py\nDJSTRIPE_WEBHOOK_EVENT_CALLBACK = 'callbacks.webhook_event_callback'\n</code></pre>"},{"location":"reference/settings/#stripe_api_host-unset","title":"STRIPE_API_HOST (= unset)","text":"<p>If set, this sets the base API host for Stripe. You may want to set this to, for example, <code>\"http://localhost:12111\"</code> if you are running stripe-mock.</p> <p>If this is set in production (DEBUG=False), a warning will be raised on <code>manage.py check</code>.</p>"},{"location":"reference/settings/#djstripe_subscriber_model_request_callback-optionally-required","title":"DJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK (Optionally Required)","text":"<p>This is required to be set in case you are linking Stripe Customers (via the <code>subscriber</code> model field) to a model other than the one defined by <code>settings.AUTH_USER_MODEL</code></p> <pre><code># settings.py\nDJSTRIPE_SUBSCRIBER_MODEL_REQUEST_CALLBACK=(lambda request: request.org)\n</code></pre>"},{"location":"reference/settings/#source-code","title":"Source Code","text":"<p>::: djstripe.settings selection: filters: - \"!^[^]\"</p>"},{"location":"reference/utils/","title":"Utilities","text":"<p>::: djstripe.utils</p>"},{"location":"usage/add_payment_method_to_customer/","title":"How to add payment method to a customer","text":"<p>You can use the <code>add_payment_method</code> method on a customer object to add a payment method token to a customer on Stripe, this will allow you to charge the customer later on that payment method since it will be added as the default payment method.</p> <pre><code>from djstripe.models import Customer\n\ncustomer = Customer.objects.first() # Get the first customer in the database as an example\ncustomer.add_payment_method(\"pm_card_visa\") # Add a payment method to the customer as the default payment method\n</code></pre> <p>If you want to add a payment method to a customer without making it the default payment method, you can use the <code>add_payment_method</code> and pass the parameter <code>set_default=False</code>:</p> <pre><code>from djstripe.models import Customer\n\ncustomer = Customer.objects.first() # Get the first customer in the database as an example\ncustomer.add_payment_method(\"pm_card_visa\", set_default=False) # Add a payment method to the customer without making it the default payment method\n</code></pre> <p>!! warning     Please keep in mind that due to securities concerns, Stripe will not let you send credit card information through their API, so you will need to use a Stripe token to add a payment method to a customer. You can read more about Stripe tokens here.</p>"},{"location":"usage/creating_individual_charges/","title":"Creating individual charges","text":"<p>On the subscriber's customer object, use the <code>charge</code> method to generate a Stripe charge. In this example, we're using the user named <code>admin</code> as the subscriber.</p> <pre><code>from decimal import Decimal\nfrom django.contrib.auth import get_user_model\nfrom djstripe.models import Customer\n\nuser = get_user_model().objects.get(username=\"admin\")\ncustomer, created = Customer.get_or_create(subscriber=user)\ncustomer.charge(Decimal(\"10.00\"), currency=\"usd\")  # Create charge for 10.00 USD\n</code></pre>"},{"location":"usage/creating_usage_record/","title":"Create a Stripe Usage Record","text":"<p>Usage records allow you to report customer usage and metrics to Stripe for metered billing of subscription prices</p> <p>Usage records created using Djstripe's <code>UsageRecord.create()</code> method will both create and sync the created <code>UsageRecord</code> object with your db.</p> <p>Note</p> <p>UsageRecord objects created directly will not sync because Stripe does not expose a way to retrieve UsageRecord objects directly. They can thus only be synced at creation time.</p>"},{"location":"usage/creating_usage_record/#code","title":"Code:","text":"<pre><code>from djstripe.models import UsageRecord\n\n# create and sync UsageRecord object\nUsageRecord.create(id=&lt;SUBSCRIPTION_ITEM_ID&gt;, quantity=&lt;SUBSCRIPTION_ITEM_QUANTITY&gt;, timestamp=timestamp)\n</code></pre>"},{"location":"usage/local_webhook_testing/","title":"Local Webhook Testing","text":"<p>The Stripe CLI allows receiving webhooks events from Stripe on your local machine via a direct connection to Stripe's API.</p> <p>Set the <code>--forward-to</code> flag to the URL of a local webhook endpoint you created via the Django admin or the Stripe Dashboard. New Style <code>UUID</code> urls are also supported from <code>v2.7</code> onwards. For example:</p> <pre><code>stripe listen --forward-to http://localhost:8000/stripe/webhook/&lt;UUID&gt;/\n</code></pre> <p>The signatures of events sent by Stripe to the webhooks are verified to prevent third-parties from interacting with the endpoints. Events will be signed with a webhook secret different from existing endpoints (because Stripe CLI doesn't require a webhook endpoint to be set up). You can obtain this secret by looking at the output of <code>stripe listen</code> or by running <code>stripe listen --print-secret</code>.</p> <p>In order to let dj-stripe know about the secret key to verify the signature, it can be passed as an HTTP header; dj-stripe looks for a header called <code>X-Djstripe-Webhook-Secret</code>:</p> <pre><code>stripe listen \\\n  --forward-to http://localhost:8000/djstripe/webhook/&lt;UUID&gt;/ \\\n  -H \"x-djstripe-webhook-secret: $(stripe listen --print-secret)\"\n</code></pre> <p>From now on, whenever you make changes on the Stripe Dashboard, the webhook endpoint you specified with <code>--forward-to</code> will called with the respective changes.</p> <p>Hint</p> <p>If the webhook secret is not passed to dj-stripe, signature validation will fail with an HTTP status code 400 and the message \"Failed to verify header\".</p> <p>Stripe events can now be triggered like so:</p> <pre><code>stripe trigger customer.created\n</code></pre>"},{"location":"usage/managing_subscriptions/","title":"Managing subscriptions and payment sources","text":""},{"location":"usage/managing_subscriptions/#extending-subscriptions","title":"Extending subscriptions","text":"<p>For your convenience, dj-stripe provides a <code>Subscription.extend(*delta*)</code> method</p> <p>Subscriptions can be extended by using the <code>Subscription.extend</code> method, which takes a positive <code>timedelta</code> as its only property. This method is useful if you want to offer time-cards, gift-cards, or some other external way of subscribing users or extending subscriptions, while keeping the billing handling within Stripe.</p> <p>Warning</p> <p>Subscription extensions are achieved by manipulating the <code>trial_end</code> of the subscription instance, which means that Stripe will change the status to <code>trialing</code>.</p>"},{"location":"usage/manually_syncing_with_stripe/","title":"Manually syncing data with Stripe","text":"<p>If you're using dj-stripe's webhook handlers then data will be automatically synced from Stripe to the Django database, but in some circumstances you may want to manually sync Stripe API data as well.</p>"},{"location":"usage/manually_syncing_with_stripe/#command-line","title":"Command line","text":"<p>You can sync your database with stripe using the management command <code>djstripe_sync_models</code>, e.g. to populate an empty database from an existing Stripe account. <pre><code>    ./manage.py djstripe_sync_models\n</code></pre> With no arguments this will sync all supported models for all in database API Keys , or a list of models to sync can also be provided. <pre><code>    ./manage.py djstripe_sync_models Invoice Subscription\n</code></pre> Note that this may be redundant since we recursively sync related objects.</p> <p>A list of models to sync can also be provided along with the API Keys. <pre><code>    ./manage.py djstripe_sync_models Invoice Subscription --api-keys sk_test_XXX sk_test_YYY\n</code></pre> This will sync all the Invoice and Subscription data for the given API Keys. Please note that the API Keys sk_test_YYY and sk_test_XXX need to be in the database.</p> <p>You can manually reprocess events using the management commands <code>djstripe_process_events</code>. By default this processes all events, but options can be passed to limit the events processed. Note the Stripe API documents a limitation where events are only guaranteed to be available for 30 days.</p> <pre><code>    # all events\n    ./manage.py djstripe_process_events\n    # failed events (events with pending webhooks or where all webhook delivery attempts failed)\n    ./manage.py djstripe_process_events --failed\n    # filter by event type (all payment_intent events in this example)\n    ./manage.py djstripe_process_events --type payment_intent.*\n    # specific events by ID\n    ./manage.py djstripe_process_events --ids evt_foo evt_bar\n    # more output for debugging processing failures\n    ./manage.py djstripe_process_events -v 2\n</code></pre>"},{"location":"usage/manually_syncing_with_stripe/#in-code","title":"In Code","text":"<p>To sync in code, for example if you write to the Stripe API and want to work with the resulting dj-stripe object without having to wait for the webhook trigger.</p> <p>This can be done using the classmethod <code>sync_from_stripe_data</code> that exists on all dj-stripe model classes.</p> <p>E.g. creating a product using the Stripe API, and then syncing the API return data to Django using dj-stripe:</p>"},{"location":"usage/subscribing_customers/","title":"Subscribing a customer to one or more prices (or plans)","text":""},{"location":"usage/subscribing_customers/#recommended-approach","title":"Recommended Approach","text":"<pre><code># Recommended Approach to use items dict with Prices\n## This will subscribe &lt;customer&gt; to both &lt;price_1&gt; and &lt;price_2&gt;\nprice_1 = Price.objects.get(nickname=\"one_price\")\nprice_2 = Price.objects.get(nickname=\"two_price\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(items=[{\"price\": price_1}, {\"price\": price_2}])\n\n## This will subscribe &lt;customer&gt; to &lt;price_1&gt;\nprice_1 = Price.objects.get(nickname=\"one_price\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(items=[{\"price\": price_1}])\n</code></pre>"},{"location":"usage/subscribing_customers/#alternate-approach-1-with-legacy-plans","title":"Alternate Approach 1 (with legacy Plans)","text":"<pre><code>## (Alternate Approach) This will subscribe &lt;customer&gt; to &lt;price_1&gt;\nprice_1 = Price.objects.get(nickname=\"one_price\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(price=price_1)\n\n# If you still use legacy Plans...\n## This will subscribe &lt;customer&gt; to both &lt;plan_1&gt; and &lt;plan_2&gt;\nplan_1 = Plan.objects.get(nickname=\"one_plan\")\nplan_2 = Plan.objects.get(nickname=\"two_plan\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(items=[{\"plan\": plan_1}, {\"plan\": plan_2}])\n\n## This will subscribe &lt;customer&gt; to &lt;plan_1&gt;\nplan_1 = Plan.objects.get(nickname=\"one_plan\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(items=[{\"plan\": plan_1}])\n</code></pre>"},{"location":"usage/subscribing_customers/#alternate-approach-2","title":"Alternate Approach 2","text":"<pre><code>## (Alternate Approach) This will subscribe &lt;customer&gt; to &lt;plan_1&gt;\nplan_1 = Plan.objects.get(nickname=\"one_plan\")\ncustomer = Customer.objects.first()\ncustomer.subscribe(plan=plan_1)\n</code></pre> <p>However in some cases <code>subscribe()</code> might not support all the arguments you need for your implementation. When this happens you can just call the official <code>stripe.Customer.subscribe()</code>.</p> <p>Tip</p> <p>Check out the following examples:</p> <ul> <li><code>form_valid view example</code></li> <li><code>djstripe.models.Customer.add_payment_method</code></li> </ul>"},{"location":"usage/using_stripe_checkout/","title":"Create a Stripe Checkout Session","text":"<p>For your convenience, dj-stripe has provided an example implementation on how to use <code>Checkouts</code></p> <p>Please note that in order for dj-stripe to create a link between your <code>customers</code> and your <code>subscribers</code>, you need to add the <code>DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY</code> key to the <code>metadata</code> parameter of <code>Checkout</code>. This has also been demonstrated in the aforementioned example</p>"},{"location":"usage/using_with_docker/","title":"Using with Docker","text":"<p>A Docker image allows you to run the Stripe CLI in a container.</p> <p>Here is a sample <code>docker-compose.yaml</code> file that sets up all the services to use <code>Stripe CLI</code> in a <code>dockerised django container (with djstripe)</code></p> <pre><code>version: \"3.9\"\n\n\nvolumes:\n    postgres-data: {}\n\n\nservices:\n\n  db:\n    image: postgres:16\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=random_number\n      - POSTGRES_USER=root\n      - POSTGRES_PASSWORD=random_number\n\n\n  web:\n    build:\n      context: .\n      dockerfile: &lt;PATH_TO_DOCKERFILE&gt;\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n      - .:/app\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n    environment:\n        # Stripe specific keys\n        - STRIPE_PUBLIC_KEY=pk_test_******\n        - STRIPE_SECRET_KEY=sk_test_******\n\n        # Database Specific Settings\n        - DJSTRIPE_TEST_DB_VENDOR=postgres\n        - DJSTRIPE_TEST_DB_PORT=5432\n        - DJSTRIPE_TEST_DB_USER=root\n        - DJSTRIPE_TEST_DB_NAME=random_number\n        - DJSTRIPE_TEST_DB_PASS=random_number\n        - DJSTRIPE_TEST_DB_HOST=db\n\n  stripe:\n    image: stripe/stripe-cli:v1.7.4\n    # In case Stripe CLI is used to perform local webhook testing, set x-djstripe-webhook-secret custom header to output of Stripe CLI.\n    command: [\"listen\", \"-H\", \"x-djstripe-webhook-secret: whsec_******\", \"--forward-to\", \"http://web:8000/djstripe/webhook/&lt;uuid&gt;/\"]\n    depends_on:\n      - web\n    environment:\n      - STRIPE_API_KEY=sk_test_******\n      - STRIPE_DEVICE_NAME=djstripe_docker\n</code></pre> <p>Note</p> <p>In case the <code>Stripe CLI</code> is used to perform local webhook testing, set <code>x-djstripe-webhook-secret</code> Custom Header in Stripe <code>listen</code> to the <code>Webhook Signing Secret</code> output of <code>Stripe CLI</code>. That is what Stripe expects and uses to create the <code>stripe-signature</code> header.</p>"},{"location":"usage/webhooks/","title":"Using Stripe Webhooks","text":""},{"location":"usage/webhooks/#setting-up-a-new-webhook-endpoint-in-dj-stripe","title":"Setting up a new webhook endpoint in dj-stripe","text":"<p>As of dj-stripe 2.7.0, dj-stripe can create its own webhook endpoints on Stripe from the Django administration.</p> <p>Create a new webhook endpoint from the Django administration by going to dj-stripe -&gt; Webhook endpoints -&gt; Add webhook endpoint (or <code>/admin/djstripe/webhookendpoint/add/</code>).</p> <p>From there, you can choose an account to create the endpoint for. If no account is chosen, the default Stripe API key will be used to create the endpoint. You can also choose to create the endpoint in test mode or live mode.</p> <p>You may want to change the base URL of the endpoint. This field will be prefilled with the current site. If you're running on the local development server, you may see <code>http://localhost:8000</code> or similar in there. Stripe won't let you save webhook endpoints with such a value, so you will want to change it to a real website URL.</p> <p>When saved from the admin, the endpoint will be created in Stripe with a dj-stripe specific UUID which will be part of the URL, making it impossible to guess externally by brute-force.</p>"},{"location":"usage/webhooks/#extra-configuration","title":"Extra configuration","text":"<p>dj-stripe provides the following settings to tune how your webhooks work:</p> <ul> <li><code>DJSTRIPE_WEBHOOK_VALIDATION</code></li> <li><code>DJSTRIPE_WEBHOOK_EVENT_CALLBACK</code></li> </ul>"},{"location":"usage/webhooks/#official-documentation","title":"Official documentation","text":"<p>Stripe docs for types of Events: https://stripe.com/docs/api/events/types</p> <p>Stripe docs for Webhooks: https://stripe.com/docs/webhooks</p> <p>Django docs for transactions: https://docs.djangoproject.com/en/dev/topics/db/transactions/#performing-actions-after-commit</p>"}]}